
Master code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001910  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000236  00800060  00001910  000019a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800296  00800296  00001bda  2**0
                  ALLOC
  3 .stab         000018b4  00000000  00000000  00001bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000051f  00000000  00000000  00003490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000039b0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c27  00000000  00000000  00003b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000089d  00000000  00000000  00005757  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000120c  00000000  00000000  00005ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00007200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000624  00000000  00000000  000075c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001eee  00000000  00000000  00007bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00009ada  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 60 05 	jmp	0xac0	; 0xac0 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 39       	cpi	r26, 0x99	; 153
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 86 0c 	jmp	0x190c	; 0x190c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

volatile uint16 session_counter = 0;//indicate session time
uint8 timeout_flag = FALSE;//stores if the session is still valid or outdated

int main(void)
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
      9a:	2b 97       	sbiw	r28, 0x0b	; 11
      9c:	0f b6       	in	r0, 0x3f	; 63
      9e:	f8 94       	cli
      a0:	de bf       	out	0x3e, r29	; 62
      a2:	0f be       	out	0x3f, r0	; 63
      a4:	cd bf       	out	0x3d, r28	; 61
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
	uint8 key_pressed = NOT_PRESSED;//
	/*****************  INITIALIZE  ***********************/
	LED_vInit(ADMIN_LED_PORT,ADMIN_LED_PIN);//initializes the led of admin
      a6:	83 e4       	ldi	r24, 0x43	; 67
      a8:	60 e0       	ldi	r22, 0x00	; 0
      aa:	0e 94 fb 07 	call	0xff6	; 0xff6 <LED_vInit>
	LED_vInit(GUEST_LED_PORT,GUEST_LED_PIN);//initializes the led of guest
      ae:	83 e4       	ldi	r24, 0x43	; 67
      b0:	61 e0       	ldi	r22, 0x01	; 1
      b2:	0e 94 fb 07 	call	0xff6	; 0xff6 <LED_vInit>
	LED_vInit(BLOCK_LED_PORT,BLOCK_LED_PIN);//initializes the led of block
      b6:	83 e4       	ldi	r24, 0x43	; 67
      b8:	62 e0       	ldi	r22, 0x02	; 2
      ba:	0e 94 fb 07 	call	0xff6	; 0xff6 <LED_vInit>
	LCD_vInit();//initializes the LCD screen
      be:	0e 94 82 07 	call	0xf04	; 0xf04 <LCD_vInit>
	keypad_vInit();//initializes the keypad
      c2:	0e 94 b9 06 	call	0xd72	; 0xd72 <keypad_vInit>
	SPI_vInitMaster();//initializes the communication protocol of SPI
      c6:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <SPI_vInitMaster>
	/******************************************************/
	/* Printing Welcome screen */
	LCD_vSend_string("Welcome to smart");
      ca:	80 e6       	ldi	r24, 0x60	; 96
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
	LCD_movecursor(2,1);
      d2:	82 e0       	ldi	r24, 0x02	; 2
      d4:	61 e0       	ldi	r22, 0x01	; 1
      d6:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
	LCD_vSend_string("home system");
      da:	81 e7       	ldi	r24, 0x71	; 113
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      e2:	2f ef       	ldi	r18, 0xFF	; 255
      e4:	39 e6       	ldi	r19, 0x69	; 105
      e6:	48 e1       	ldi	r20, 0x18	; 24
      e8:	21 50       	subi	r18, 0x01	; 1
      ea:	30 40       	sbci	r19, 0x00	; 0
      ec:	40 40       	sbci	r20, 0x00	; 0
      ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x56>
      f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x60>
      f2:	00 00       	nop
	_delay_ms(1000);//Halt the system for the given time in (ms)
	LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
      f4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
      f8:	80 e0       	ldi	r24, 0x00	; 0
      fa:	91 e0       	ldi	r25, 0x01	; 1
      fc:	0e 94 9e 0a 	call	0x153c	; 0x153c <EEPROM_ui8ReadByteFromAddress>
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	39 f4       	brne	.+14     	; 0x112 <main+0x80>
     104:	81 e0       	ldi	r24, 0x01	; 1
     106:	91 e0       	ldi	r25, 0x01	; 1
     108:	0e 94 9e 0a 	call	0x153c	; 0x153c <EEPROM_ui8ReadByteFromAddress>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	09 f4       	brne	.+2      	; 0x112 <main+0x80>
     110:	d1 c0       	rjmp	.+418    	; 0x2b4 <main+0x222>
	{
		LCD_vSend_string("Login for");//printing login menu
     112:	8d e7       	ldi	r24, 0x7D	; 125
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
		LCD_movecursor(2,1);//move the cursor to the second line
     11a:	82 e0       	ldi	r24, 0x02	; 2
     11c:	61 e0       	ldi	r22, 0x01	; 1
     11e:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
		LCD_vSend_string("first time");
     122:	87 e8       	ldi	r24, 0x87	; 135
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     12a:	8f ef       	ldi	r24, 0xFF	; 255
     12c:	99 e6       	ldi	r25, 0x69	; 105
     12e:	a8 e1       	ldi	r26, 0x18	; 24
     130:	81 50       	subi	r24, 0x01	; 1
     132:	90 40       	sbci	r25, 0x00	; 0
     134:	a0 40       	sbci	r26, 0x00	; 0
     136:	e1 f7       	brne	.-8      	; 0x130 <main+0x9e>
     138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xa8>
     13a:	00 00       	nop
		_delay_ms(1000);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     13c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
		LCD_vSend_string("Set Admin pass");//printing the set admin password menu
     140:	82 e9       	ldi	r24, 0x92	; 146
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
		LCD_movecursor(2,1);
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	61 e0       	ldi	r22, 0x01	; 1
     14c:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
		LCD_vSend_string("Admin pass:");
     150:	81 ea       	ldi	r24, 0xA1	; 161
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
     158:	8f ef       	ldi	r24, 0xFF	; 255
     15a:	8d 83       	std	Y+5, r24	; 0x05
     15c:	8e 83       	std	Y+6, r24	; 0x06
     15e:	8f 83       	std	Y+7, r24	; 0x07
     160:	88 87       	std	Y+8, r24	; 0x08
     162:	8e 01       	movw	r16, r28
     164:	0b 5f       	subi	r16, 0xFB	; 251
     166:	1f 4f       	sbci	r17, 0xFF	; 255
     168:	78 01       	movw	r14, r16
     16a:	0f 2e       	mov	r0, r31
     16c:	fc e0       	ldi	r31, 0x0C	; 12
     16e:	df 2e       	mov	r13, r31
     170:	f0 2d       	mov	r31, r0
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     172:	0e 94 f6 06 	call	0xdec	; 0xdec <keypad_u8check_press>
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     176:	8f 3f       	cpi	r24, 0xFF	; 255
     178:	e1 f3       	breq	.-8      	; 0x172 <main+0xe0>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     17a:	d7 01       	movw	r26, r14
     17c:	8d 93       	st	X+, r24
     17e:	7d 01       	movw	r14, r26
			LCD_vSend_char(key_pressed);//print the entered character
     180:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     184:	2f ef       	ldi	r18, 0xFF	; 255
     186:	32 e5       	ldi	r19, 0x52	; 82
     188:	47 e0       	ldi	r20, 0x07	; 7
     18a:	21 50       	subi	r18, 0x01	; 1
     18c:	30 40       	sbci	r19, 0x00	; 0
     18e:	40 40       	sbci	r20, 0x00	; 0
     190:	e1 f7       	brne	.-8      	; 0x18a <main+0xf8>
     192:	00 c0       	rjmp	.+0      	; 0x194 <main+0x102>
     194:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	6d 2d       	mov	r22, r13
     19a:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
     19e:	8a e2       	ldi	r24, 0x2A	; 42
     1a0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     1a4:	8f ef       	ldi	r24, 0xFF	; 255
     1a6:	90 e7       	ldi	r25, 0x70	; 112
     1a8:	a2 e0       	ldi	r26, 0x02	; 2
     1aa:	81 50       	subi	r24, 0x01	; 1
     1ac:	90 40       	sbci	r25, 0x00	; 0
     1ae:	a0 40       	sbci	r26, 0x00	; 0
     1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x118>
     1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x122>
     1b4:	00 00       	nop
     1b6:	d3 94       	inc	r13
		LCD_vSend_string("Admin pass:");

		/********************************* setting Admin password **********************************************/
		uint8 pass_counter=0;//the counter of the characters of the password
		uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//the array where it stored the password
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     1b8:	90 e1       	ldi	r25, 0x10	; 16
     1ba:	d9 16       	cp	r13, r25
     1bc:	d1 f6       	brne	.-76     	; 0x172 <main+0xe0>
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_ADMIN_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     1be:	82 e0       	ldi	r24, 0x02	; 2
     1c0:	91 e0       	ldi	r25, 0x01	; 1
     1c2:	be 01       	movw	r22, r28
     1c4:	6b 5f       	subi	r22, 0xFB	; 251
     1c6:	7f 4f       	sbci	r23, 0xFF	; 255
     1c8:	44 e0       	ldi	r20, 0x04	; 4
     1ca:	50 e0       	ldi	r21, 0x00	; 0
     1cc:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(ADMIN_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     1d0:	80 e0       	ldi	r24, 0x00	; 0
     1d2:	91 e0       	ldi	r25, 0x01	; 1
     1d4:	61 e0       	ldi	r22, 0x01	; 1
     1d6:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_vWriteByteToAddress>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     1da:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");// show pass saved message
     1de:	8d ea       	ldi	r24, 0xAD	; 173
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     1e6:	2f ef       	ldi	r18, 0xFF	; 255
     1e8:	34 e3       	ldi	r19, 0x34	; 52
     1ea:	4c e0       	ldi	r20, 0x0C	; 12
     1ec:	21 50       	subi	r18, 0x01	; 1
     1ee:	30 40       	sbci	r19, 0x00	; 0
     1f0:	40 40       	sbci	r20, 0x00	; 0
     1f2:	e1 f7       	brne	.-8      	; 0x1ec <main+0x15a>
     1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <main+0x164>
     1f6:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     1f8:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>

		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
     1fc:	88 eb       	ldi	r24, 0xB8	; 184
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
		LCD_movecursor(2,1);
     204:	82 e0       	ldi	r24, 0x02	; 2
     206:	61 e0       	ldi	r22, 0x01	; 1
     208:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
		LCD_vSend_string("Guest Pass:");
     20c:	87 ec       	ldi	r24, 0xC7	; 199
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     214:	0f 2e       	mov	r0, r31
     216:	fc e0       	ldi	r31, 0x0C	; 12
     218:	ef 2e       	mov	r14, r31
     21a:	f0 2d       	mov	r31, r0
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     21c:	0e 94 f6 06 	call	0xdec	; 0xdec <keypad_u8check_press>
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
		{
			key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
			while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     220:	8f 3f       	cpi	r24, 0xFF	; 255
     222:	e1 f3       	breq	.-8      	; 0x21c <main+0x18a>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}

			pass[pass_counter]=key_pressed;//add the entered character to the pass array
     224:	d8 01       	movw	r26, r16
     226:	8d 93       	st	X+, r24
     228:	8d 01       	movw	r16, r26
			LCD_vSend_char(key_pressed);//print the entered character
     22a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     22e:	2f ef       	ldi	r18, 0xFF	; 255
     230:	32 e5       	ldi	r19, 0x52	; 82
     232:	47 e0       	ldi	r20, 0x07	; 7
     234:	21 50       	subi	r18, 0x01	; 1
     236:	30 40       	sbci	r19, 0x00	; 0
     238:	40 40       	sbci	r20, 0x00	; 0
     23a:	e1 f7       	brne	.-8      	; 0x234 <main+0x1a2>
     23c:	00 c0       	rjmp	.+0      	; 0x23e <main+0x1ac>
     23e:	00 00       	nop
			_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	6e 2d       	mov	r22, r14
     244:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
     248:	8a e2       	ldi	r24, 0x2A	; 42
     24a:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     24e:	8f ef       	ldi	r24, 0xFF	; 255
     250:	90 e7       	ldi	r25, 0x70	; 112
     252:	a2 e0       	ldi	r26, 0x02	; 2
     254:	81 50       	subi	r24, 0x01	; 1
     256:	90 40       	sbci	r25, 0x00	; 0
     258:	a0 40       	sbci	r26, 0x00	; 0
     25a:	e1 f7       	brne	.-8      	; 0x254 <main+0x1c2>
     25c:	00 c0       	rjmp	.+0      	; 0x25e <main+0x1cc>
     25e:	00 00       	nop
     260:	e3 94       	inc	r14
		/********************************* setting guest password **********************************************/
		pass_counter=0;//reset password counter which count the characters of the pass
		LCD_vSend_string("Set Guest Pass");//printing the set admin password menu
		LCD_movecursor(2,1);
		LCD_vSend_string("Guest Pass:");
		while (pass_counter<PASS_SIZE)//loop till the user finish inserting the pass
     262:	90 e1       	ldi	r25, 0x10	; 16
     264:	e9 16       	cp	r14, r25
     266:	d1 f6       	brne	.-76     	; 0x21c <main+0x18a>
			LCD_movecursor(2,12+pass_counter);//move the lcd cursor to the previous location to write the password symbol over the character
			LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
			_delay_ms(100);//Halt the system for the given time in (ms)
			pass_counter++;//increase the characters count
		}
		EEPROM_vWriteBlockToAddress(EEPROM_GUEST_ADDRESS,pass,PASS_SIZE);//save the entire password as a block to the EEPROM
     268:	86 e0       	ldi	r24, 0x06	; 6
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	be 01       	movw	r22, r28
     26e:	6b 5f       	subi	r22, 0xFB	; 251
     270:	7f 4f       	sbci	r23, 0xFF	; 255
     272:	44 e0       	ldi	r20, 0x04	; 4
     274:	50 e0       	ldi	r21, 0x00	; 0
     276:	0e 94 c9 0a 	call	0x1592	; 0x1592 <EEPROM_vWriteBlockToAddress>
		EEPROM_vWriteByteToAddress(GUEST_PASS_STATUS_ADDRESS,PASS_SET);//write the status of pass as it is set
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	91 e0       	ldi	r25, 0x01	; 1
     27e:	61 e0       	ldi	r22, 0x01	; 1
     280:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_vWriteByteToAddress>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     284:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
		LCD_vSend_string("Pass Saved");//move the lcd cursor to the previous location
     288:	8d ea       	ldi	r24, 0xAD	; 173
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     290:	2f ef       	ldi	r18, 0xFF	; 255
     292:	34 e3       	ldi	r19, 0x34	; 52
     294:	4c e0       	ldi	r20, 0x0C	; 12
     296:	21 50       	subi	r18, 0x01	; 1
     298:	30 40       	sbci	r19, 0x00	; 0
     29a:	40 40       	sbci	r20, 0x00	; 0
     29c:	e1 f7       	brne	.-8      	; 0x296 <main+0x204>
     29e:	00 c0       	rjmp	.+0      	; 0x2a0 <main+0x20e>
     2a0:	00 00       	nop
		_delay_ms(500);//Halt the system for the given time in (ms)
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     2a2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
     2a6:	8a e0       	ldi	r24, 0x0A	; 10
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	60 e0       	ldi	r22, 0x00	; 0
     2ac:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_vWriteByteToAddress>
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     2b0:	1b 86       	std	Y+11, r1	; 0x0b
	LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
	/***************************/
	/*Setting Admin and Guest passwords if not set */
	//read the state of the the passwords of the admin and guest if both are set or not set
	if ( (EEPROM_ui8ReadByteFromAddress(ADMIN_PASS_STATUS_ADDRESS)!=PASS_SET) || (EEPROM_ui8ReadByteFromAddress(GUEST_PASS_STATUS_ADDRESS)!=PASS_SET) )
	{
     2b2:	05 c0       	rjmp	.+10     	; 0x2be <main+0x22c>
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
		EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);
	}//The end of if admin and guest password is set
	else//this code of else run only if the system is not running for the first time (ADMIN and GUEST passwords are set)
	{
		block_mode_flag = EEPROM_ui8ReadByteFromAddress(LOGIN_BLOCKED_ADDRESS); //read the blocked location from EEPROM
     2b4:	8a e0       	ldi	r24, 0x0A	; 10
     2b6:	91 e0       	ldi	r25, 0x01	; 1
     2b8:	0e 94 9e 0a 	call	0x153c	; 0x153c <EEPROM_ui8ReadByteFromAddress>
     2bc:	8b 87       	std	Y+11, r24	; 0x0b
	uint8 temperature = 0;//The average temperature of the room
	uint8 temp_ones = NOT_SELECTED;//The entered right number of the temperature
	uint8 temp_tens = NOT_SELECTED;//The entered left number of the temperature
	
	uint8 login_mode = NO_MODE; //Store the current user mode admin or guest or not logged in
	uint8 block_mode_flag = FALSE;//is true if the login is blocked or false if not blocked
     2be:	ee 24       	eor	r14, r14
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Admin mode");
     2c0:	4c e2       	ldi	r20, 0x2C	; 44
     2c2:	51 e0       	ldi	r21, 0x01	; 1
     2c4:	49 87       	std	Y+9, r20	; 0x09
     2c6:	5a 87       	std	Y+10, r21	; 0x0a
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
     2c8:	0f 2e       	mov	r0, r31
     2ca:	f7 e3       	ldi	r31, 0x37	; 55
     2cc:	4f 2e       	mov	r4, r31
     2ce:	f1 e0       	ldi	r31, 0x01	; 1
     2d0:	5f 2e       	mov	r5, r31
     2d2:	f0 2d       	mov	r31, r0
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						LCD_vSend_string("Wrong Pass");
						LCD_movecursor(2,1);
						LCD_vSend_string("Tries left:");
     2d4:	0f 2e       	mov	r0, r31
     2d6:	f9 e5       	ldi	r31, 0x59	; 89
     2d8:	af 2e       	mov	r10, r31
     2da:	f1 e0       	ldi	r31, 0x01	; 1
     2dc:	bf 2e       	mov	r11, r31
     2de:	f0 2d       	mov	r31, r0
	while (1)//The start of the periodic code
	{
		key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
		uint8 pass_tries_count=0;//stores how many times the user tried to log in to the system and failed
		
		if ( timeout_flag==TRUE )//check for timeout
     2e0:	80 91 96 02 	lds	r24, 0x0296
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	79 f5       	brne	.+94     	; 0x346 <main+0x2b4>
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
     2e8:	0e 94 0b 0b 	call	0x1616	; 0x1616 <timer0_stop>
			session_counter = 0;//clear session counter
     2ec:	10 92 98 02 	sts	0x0298, r1
     2f0:	10 92 97 02 	sts	0x0297, r1
			timeout_flag=FALSE;//clear time out flag
     2f4:	10 92 96 02 	sts	0x0296, r1
			login_mode=NO_MODE;//log the user out
			key_pressed = NOT_PRESSED;//clear the key_pressed to avoid unwanted selection in the menu switch
			LED_vTurnOff(GUEST_LED_PORT,GUEST_LED_PIN);//turnoff the led of the guest
     2f8:	83 e4       	ldi	r24, 0x43	; 67
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_vTurnOff>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
     300:	83 e4       	ldi	r24, 0x43	; 67
     302:	60 e0       	ldi	r22, 0x00	; 0
     304:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_vTurnOff>
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     308:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
			LCD_vSend_string("Session Timeout");//print session timeout message
     30c:	83 ed       	ldi	r24, 0xD3	; 211
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	39 e6       	ldi	r19, 0x69	; 105
     318:	48 e1       	ldi	r20, 0x18	; 24
     31a:	21 50       	subi	r18, 0x01	; 1
     31c:	30 40       	sbci	r19, 0x00	; 0
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	e1 f7       	brne	.-8      	; 0x31a <main+0x288>
     322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x292>
     324:	00 00       	nop
		if ( timeout_flag==TRUE )//check for timeout
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
			session_counter = 0;//clear session counter
			timeout_flag=FALSE;//clear time out flag
			login_mode=NO_MODE;//log the user out
     326:	ee 24       	eor	r14, r14
     328:	00 e0       	ldi	r16, 0x00	; 0
     32a:	1f ef       	ldi	r17, 0xFF	; 255
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Guest mode");
     32c:	0f 2e       	mov	r0, r31
     32e:	f5 e6       	ldi	r31, 0x65	; 101
     330:	8f 2e       	mov	r8, r31
     332:	f1 e0       	ldi	r31, 0x01	; 1
     334:	9f 2e       	mov	r9, r31
     336:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter pass:");
     338:	0f 2e       	mov	r0, r31
     33a:	f0 e7       	ldi	r31, 0x70	; 112
     33c:	6f 2e       	mov	r6, r31
     33e:	f1 e0       	ldi	r31, 0x01	; 1
     340:	7f 2e       	mov	r7, r31
     342:	f0 2d       	mov	r31, r0
     344:	04 c0       	rjmp	.+8      	; 0x34e <main+0x2bc>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     346:	ee 20       	and	r14, r14
     348:	79 f3       	breq	.-34     	; 0x328 <main+0x296>
     34a:	be c1       	rjmp	.+892    	; 0x6c8 <main+0x636>
     34c:	ee 24       	eor	r14, r14
		{
			if(block_mode_flag==TRUE)//if the login process was blocked wait till the end of the block period
     34e:	3b 85       	ldd	r19, Y+11	; 0x0b
     350:	31 30       	cpi	r19, 0x01	; 1
     352:	39 f5       	brne	.+78     	; 0x3a2 <main+0x310>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     354:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
				LCD_vSend_string("Login blocked");
     358:	83 ee       	ldi	r24, 0xE3	; 227
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
				LCD_movecursor(2,1);
     360:	82 e0       	ldi	r24, 0x02	; 2
     362:	61 e0       	ldi	r22, 0x01	; 1
     364:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
				LCD_vSend_string("wait 20 seconds");
     368:	81 ef       	ldi	r24, 0xF1	; 241
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
     370:	83 e4       	ldi	r24, 0x43	; 67
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	0e 94 ff 07 	call	0xffe	; 0xffe <LED_vTurnOn>
     378:	8a ea       	ldi	r24, 0xAA	; 170
     37a:	96 ee       	ldi	r25, 0xE6	; 230
     37c:	a6 e9       	ldi	r26, 0x96	; 150
     37e:	b1 e0       	ldi	r27, 0x01	; 1
     380:	81 50       	subi	r24, 0x01	; 1
     382:	90 40       	sbci	r25, 0x00	; 0
     384:	a0 40       	sbci	r26, 0x00	; 0
     386:	b0 40       	sbci	r27, 0x00	; 0
     388:	d9 f7       	brne	.-10     	; 0x380 <main+0x2ee>
     38a:	00 00       	nop
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
				block_mode_flag = FALSE;//Disable block of runtime
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
     38c:	83 e4       	ldi	r24, 0x43	; 67
     38e:	62 e0       	ldi	r22, 0x02	; 2
     390:	0e 94 03 08 	call	0x1006	; 0x1006 <LED_vTurnOff>
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	60 e0       	ldi	r22, 0x00	; 0
     39a:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_vWriteByteToAddress>
				LCD_vSend_string("Login blocked");
				LCD_movecursor(2,1);
				LCD_vSend_string("wait 20 seconds");
				LED_vTurnOn(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn on the led of Blocked
				_delay_ms(BLOCK_MODE_TIME);//Halt the system for the given time in (ms)
				pass_tries_count = 0; //Clear the count on number of wrong tries
     39e:	00 e0       	ldi	r16, 0x00	; 0
				block_mode_flag = FALSE;//Disable block of runtime
     3a0:	1b 86       	std	Y+11, r1	; 0x0b
				LED_vTurnOff(BLOCK_LED_PORT,BLOCK_LED_PIN);//Turn off the led of Blocked
				EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,FALSE);//write false at blocked location in EEPROM
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3a2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
			LCD_vSend_string("Select mode :");
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			LCD_movecursor(2,1);
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	61 e0       	ldi	r22, 0x01	; 1
     3b2:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
			LCD_vSend_string("0:Admin 1:Guest");
     3b6:	8f e0       	ldi	r24, 0x0F	; 15
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     3be:	1f 3f       	cpi	r17, 0xFF	; 255
     3c0:	29 f4       	brne	.+10     	; 0x3cc <main+0x33a>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     3c2:	0e 94 f6 06 	call	0xdec	; 0xdec <keypad_u8check_press>
     3c6:	18 2f       	mov	r17, r24
			}
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Select mode :");
			LCD_movecursor(2,1);
			LCD_vSend_string("0:Admin 1:Guest");
			while(key_pressed==NOT_PRESSED)//wait for the selection of the mode
     3c8:	8f 3f       	cpi	r24, 0xFF	; 255
     3ca:	d9 f3       	breq	.-10     	; 0x3c2 <main+0x330>
			{
				key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
			}
			if ( key_pressed!=CHECK_ADMIN_MODE && key_pressed!=CHECK_GUEST_MODE )
     3cc:	81 2f       	mov	r24, r17
     3ce:	80 53       	subi	r24, 0x30	; 48
     3d0:	82 30       	cpi	r24, 0x02	; 2
     3d2:	88 f0       	brcs	.+34     	; 0x3f6 <main+0x364>
			{
				LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     3d4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
				LCD_vSend_string("Wrong input.");//Prints error message on the LCD
     3d8:	8f e1       	ldi	r24, 0x1F	; 31
     3da:	91 e0       	ldi	r25, 0x01	; 1
     3dc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     3e0:	2f ef       	ldi	r18, 0xFF	; 255
     3e2:	39 e6       	ldi	r19, 0x69	; 105
     3e4:	48 e1       	ldi	r20, 0x18	; 24
     3e6:	21 50       	subi	r18, 0x01	; 1
     3e8:	30 40       	sbci	r19, 0x00	; 0
     3ea:	40 40       	sbci	r20, 0x00	; 0
     3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x354>
     3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x35e>
     3f0:	00 00       	nop
				key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
     3f2:	1f ef       	ldi	r17, 0xFF	; 255
				_delay_ms(1000);//Halt the system for the given time in (ms)
				continue;//return to the loop of login #while (login_mode==NO_MODE)# line 128
     3f4:	66 c1       	rjmp	.+716    	; 0x6c2 <main+0x630>
			}

			uint8 pass_counter=0;//counts the entered key of the password from the keypad
			uint8 pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire password that will be entered by the user to be check
     3f6:	8f ef       	ldi	r24, 0xFF	; 255
     3f8:	8d 83       	std	Y+5, r24	; 0x05
     3fa:	8e 83       	std	Y+6, r24	; 0x06
     3fc:	8f 83       	std	Y+7, r24	; 0x07
     3fe:	88 87       	std	Y+8, r24	; 0x08
			uint8 stored_pass[PASS_SIZE]={NOT_STORED,NOT_STORED,NOT_STORED,NOT_STORED};//temporarily hold the entire stored password that is written by the user for the first time
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	8a 83       	std	Y+2, r24	; 0x02
     404:	8b 83       	std	Y+3, r24	; 0x03
     406:	8c 83       	std	Y+4, r24	; 0x04
			
			switch(key_pressed)
     408:	10 33       	cpi	r17, 0x30	; 48
     40a:	41 f0       	breq	.+16     	; 0x41c <main+0x38a>
     40c:	11 33       	cpi	r17, 0x31	; 49
     40e:	09 f0       	breq	.+2      	; 0x412 <main+0x380>
     410:	58 c1       	rjmp	.+688    	; 0x6c2 <main+0x630>
					}
				}
				break;//bREAK SWITCH case
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
     412:	32 e0       	ldi	r19, 0x02	; 2
     414:	e3 16       	cp	r14, r19
     416:	09 f0       	breq	.+2      	; 0x41a <main+0x388>
     418:	aa c0       	rjmp	.+340    	; 0x56e <main+0x4dc>
     41a:	56 c1       	rjmp	.+684    	; 0x6c8 <main+0x636>
			
			switch(key_pressed)
			{
				/********************************* Admin login **********************************************/
				case CHECK_ADMIN_MODE:
				while(login_mode!=ADMIN)//this loop is to repeat the login for admin in case of wrong password
     41c:	41 e0       	ldi	r20, 0x01	; 1
     41e:	e4 16       	cp	r14, r20
     420:	09 f4       	brne	.+2      	; 0x424 <main+0x392>
     422:	52 c1       	rjmp	.+676    	; 0x6c8 <main+0x636>
     424:	82 e3       	ldi	r24, 0x32	; 50
     426:	d8 2e       	mov	r13, r24
     428:	d0 1a       	sub	r13, r16
     42a:	0f 2e       	mov	r0, r31
     42c:	fc e0       	ldi	r31, 0x0C	; 12
     42e:	cf 2e       	mov	r12, r31
     430:	f0 2d       	mov	r31, r0
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     432:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("Admin mode");
     436:	89 85       	ldd	r24, Y+9	; 0x09
     438:	9a 85       	ldd	r25, Y+10	; 0x0a
     43a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					LCD_movecursor(2,1);
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
					LCD_vSend_string("Enter Pass:");
     446:	c2 01       	movw	r24, r4
     448:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     44c:	8f ef       	ldi	r24, 0xFF	; 255
     44e:	91 ee       	ldi	r25, 0xE1	; 225
     450:	a4 e0       	ldi	r26, 0x04	; 4
     452:	81 50       	subi	r24, 0x01	; 1
     454:	90 40       	sbci	r25, 0x00	; 0
     456:	a0 40       	sbci	r26, 0x00	; 0
     458:	e1 f7       	brne	.-8      	; 0x452 <main+0x3c0>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <main+0x3ca>
     45c:	00 00       	nop
     45e:	0f 2e       	mov	r0, r31
     460:	f5 e0       	ldi	r31, 0x05	; 5
     462:	ef 2e       	mov	r14, r31
     464:	ff 24       	eor	r15, r15
     466:	f0 2d       	mov	r31, r0
     468:	ec 0e       	add	r14, r28
     46a:	fd 1e       	adc	r15, r29
     46c:	1c 2d       	mov	r17, r12
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     46e:	0e 94 f6 06 	call	0xdec	; 0xdec <keypad_u8check_press>
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     472:	8f 3f       	cpi	r24, 0xFF	; 255
     474:	e1 f3       	breq	.-8      	; 0x46e <main+0x3dc>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the entered character to the pass array
     476:	d7 01       	movw	r26, r14
     478:	8d 93       	st	X+, r24
     47a:	7d 01       	movw	r14, r26
						LCD_vSend_char(key_pressed);//print the entered character
     47c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     480:	2f ef       	ldi	r18, 0xFF	; 255
     482:	32 e5       	ldi	r19, 0x52	; 82
     484:	47 e0       	ldi	r20, 0x07	; 7
     486:	21 50       	subi	r18, 0x01	; 1
     488:	30 40       	sbci	r19, 0x00	; 0
     48a:	40 40       	sbci	r20, 0x00	; 0
     48c:	e1 f7       	brne	.-8      	; 0x486 <main+0x3f4>
     48e:	00 c0       	rjmp	.+0      	; 0x490 <main+0x3fe>
     490:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//move the cursor of the lcd screen to the previous location
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	61 2f       	mov	r22, r17
     496:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
     49a:	8a e2       	ldi	r24, 0x2A	; 42
     49c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     4a0:	8f ef       	ldi	r24, 0xFF	; 255
     4a2:	90 e7       	ldi	r25, 0x70	; 112
     4a4:	a2 e0       	ldi	r26, 0x02	; 2
     4a6:	81 50       	subi	r24, 0x01	; 1
     4a8:	90 40       	sbci	r25, 0x00	; 0
     4aa:	a0 40       	sbci	r26, 0x00	; 0
     4ac:	e1 f7       	brne	.-8      	; 0x4a6 <main+0x414>
     4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <main+0x41e>
     4b0:	00 00       	nop
     4b2:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_vSend_string("Admin mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter Pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     4b4:	10 31       	cpi	r17, 0x10	; 16
     4b6:	d9 f6       	brne	.-74     	; 0x46e <main+0x3dc>
						LCD_vSend_char(PASSWORD_SYMBOL);// to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM
     4b8:	82 e0       	ldi	r24, 0x02	; 2
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	be 01       	movw	r22, r28
     4be:	6f 5f       	subi	r22, 0xFF	; 255
     4c0:	7f 4f       	sbci	r23, 0xFF	; 255
     4c2:	44 e0       	ldi	r20, 0x04	; 4
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	0e 94 a5 0a 	call	0x154a	; 0x154a <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
     4ca:	ce 01       	movw	r24, r28
     4cc:	05 96       	adiw	r24, 0x05	; 5
     4ce:	be 01       	movw	r22, r28
     4d0:	6f 5f       	subi	r22, 0xFF	; 255
     4d2:	7f 4f       	sbci	r23, 0xFF	; 255
     4d4:	44 e0       	ldi	r20, 0x04	; 4
     4d6:	0e 94 77 05 	call	0xaee	; 0xaee <ui8ComparePass>
     4da:	81 30       	cpi	r24, 0x01	; 1
     4dc:	11 f5       	brne	.+68     	; 0x522 <main+0x490>
					{
						login_mode = ADMIN;//set the login mode to admin mode
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     4de:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Right pass");
     4e2:	83 e4       	ldi	r24, 0x43	; 67
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
						LCD_movecursor(2,1);
     4ea:	82 e0       	ldi	r24, 0x02	; 2
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
						LCD_vSend_string("Admin mode");
     4f2:	8c e2       	ldi	r24, 0x2C	; 44
     4f4:	91 e0       	ldi	r25, 0x01	; 1
     4f6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     4fa:	2f ef       	ldi	r18, 0xFF	; 255
     4fc:	34 e3       	ldi	r19, 0x34	; 52
     4fe:	4c e0       	ldi	r20, 0x0C	; 12
     500:	21 50       	subi	r18, 0x01	; 1
     502:	30 40       	sbci	r19, 0x00	; 0
     504:	40 40       	sbci	r20, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <main+0x46e>
     508:	00 c0       	rjmp	.+0      	; 0x50a <main+0x478>
     50a:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(ADMIN_LED_PORT,ADMIN_LED_PIN);//turn on the led of admin
     50c:	83 e4       	ldi	r24, 0x43	; 67
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	0e 94 ff 07 	call	0xffe	; 0xffe <LED_vTurnOn>
						timer0_initializeCTC();//start the timer that counts the session time
     514:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     518:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					EEPROM_vReadBlockFromAddress(EEPROM_ADMIN_ADDRESS,stored_pass,PASS_SIZE);//read the stored pass from the EEPROM

					/*compare passwords*/
					if ((ui8ComparePass(pass,stored_pass,PASS_SIZE)) == TRUE)//in case of right password
					{
						login_mode = ADMIN;//set the login mode to admin mode
     51c:	ee 24       	eor	r14, r14
     51e:	e3 94       	inc	r14
     520:	d3 c0       	rjmp	.+422    	; 0x6c8 <main+0x636>
						timer0_initializeCTC();//start the timer that counts the session time
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     522:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     524:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong Pass");
     528:	8e e4       	ldi	r24, 0x4E	; 78
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
						LCD_movecursor(2,1);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	61 e0       	ldi	r22, 0x01	; 1
     534:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
						LCD_vSend_string("Tries left:");
     538:	c5 01       	movw	r24, r10
     53a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     53e:	8d 2d       	mov	r24, r13
     540:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     544:	8f ef       	ldi	r24, 0xFF	; 255
     546:	99 e6       	ldi	r25, 0x69	; 105
     548:	a8 e1       	ldi	r26, 0x18	; 24
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	90 40       	sbci	r25, 0x00	; 0
     54e:	a0 40       	sbci	r26, 0x00	; 0
     550:	e1 f7       	brne	.-8      	; 0x54a <main+0x4b8>
     552:	00 c0       	rjmp	.+0      	; 0x554 <main+0x4c2>
     554:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     556:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
     55a:	da 94       	dec	r13
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     55c:	03 30       	cpi	r16, 0x03	; 3
     55e:	08 f4       	brcc	.+2      	; 0x562 <main+0x4d0>
     560:	68 cf       	rjmp	.-304    	; 0x432 <main+0x3a0>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     562:	8a e0       	ldi	r24, 0x0A	; 10
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//break the loop of admin login #while(login_mode!=ADMIN)# at line 169
     56c:	8b c2       	rjmp	.+1302   	; 0xa84 <__stack+0x225>
     56e:	82 e3       	ldi	r24, 0x32	; 50
     570:	d8 2e       	mov	r13, r24
     572:	d0 1a       	sub	r13, r16
     574:	0f 2e       	mov	r0, r31
     576:	fc e0       	ldi	r31, 0x0C	; 12
     578:	cf 2e       	mov	r12, r31
     57a:	f0 2d       	mov	r31, r0
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						LCD_vSend_string("Wrong pass");
     57c:	0f 2e       	mov	r0, r31
     57e:	fc e7       	ldi	r31, 0x7C	; 124
     580:	2f 2e       	mov	r2, r31
     582:	f1 e0       	ldi	r31, 0x01	; 1
     584:	3f 2e       	mov	r3, r31
     586:	f0 2d       	mov	r31, r0
				/********************************* Guest login **********************************************/
				case  CHECK_GUEST_MODE:
				while(login_mode != GUEST)
				{
					key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     588:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("Guest mode");
     58c:	c4 01       	movw	r24, r8
     58e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					LCD_movecursor(2,1);
     592:	82 e0       	ldi	r24, 0x02	; 2
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
					LCD_vSend_string("Enter pass:");
     59a:	c3 01       	movw	r24, r6
     59c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     5a0:	2f ef       	ldi	r18, 0xFF	; 255
     5a2:	31 ee       	ldi	r19, 0xE1	; 225
     5a4:	44 e0       	ldi	r20, 0x04	; 4
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	30 40       	sbci	r19, 0x00	; 0
     5aa:	40 40       	sbci	r20, 0x00	; 0
     5ac:	e1 f7       	brne	.-8      	; 0x5a6 <main+0x514>
     5ae:	00 c0       	rjmp	.+0      	; 0x5b0 <main+0x51e>
     5b0:	00 00       	nop
     5b2:	0f 2e       	mov	r0, r31
     5b4:	f5 e0       	ldi	r31, 0x05	; 5
     5b6:	ef 2e       	mov	r14, r31
     5b8:	ff 24       	eor	r15, r15
     5ba:	f0 2d       	mov	r31, r0
     5bc:	ec 0e       	add	r14, r28
     5be:	fd 1e       	adc	r15, r29
     5c0:	1c 2d       	mov	r17, r12
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     5c2:	0e 94 f6 06 	call	0xdec	; 0xdec <keypad_u8check_press>
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
					{
						while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     5c6:	8f 3f       	cpi	r24, 0xFF	; 255
     5c8:	e1 f3       	breq	.-8      	; 0x5c2 <main+0x530>
						{
							key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
						}
						pass[pass_counter]=key_pressed;//add the pressed key to the password string
     5ca:	d7 01       	movw	r26, r14
     5cc:	8d 93       	st	X+, r24
     5ce:	7d 01       	movw	r14, r26
						LCD_vSend_char(key_pressed);//print the entered character
     5d0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	32 e5       	ldi	r19, 0x52	; 82
     5d8:	47 e0       	ldi	r20, 0x07	; 7
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	30 40       	sbci	r19, 0x00	; 0
     5de:	40 40       	sbci	r20, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x548>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x552>
     5e4:	00 00       	nop
						_delay_ms(CHARACTER_PREVIEW_TIME);//Halt the system for the given time in (ms)
						LCD_movecursor(2,12+pass_counter);//return the cursor to the location of the previous character to replace it with the password sign
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	61 2f       	mov	r22, r17
     5ea:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
     5ee:	8a e2       	ldi	r24, 0x2A	; 42
     5f0:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     5f4:	8f ef       	ldi	r24, 0xFF	; 255
     5f6:	90 e7       	ldi	r25, 0x70	; 112
     5f8:	a2 e0       	ldi	r26, 0x02	; 2
     5fa:	81 50       	subi	r24, 0x01	; 1
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	a0 40       	sbci	r26, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x568>
     602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x572>
     604:	00 00       	nop
     606:	1f 5f       	subi	r17, 0xFF	; 255
					LCD_vSend_string("Guest mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Enter pass:");
					_delay_ms(200);//Halt the system for the given time in (ms)
					pass_counter=0;//counts the number of entered characters
					while(pass_counter<PASS_SIZE)
     608:	10 31       	cpi	r17, 0x10	; 16
     60a:	d9 f6       	brne	.-74     	; 0x5c2 <main+0x530>
						LCD_vSend_char(PASSWORD_SYMBOL); // to display (Password sign *)
						_delay_ms(100);//Halt the system for the given time in (ms)
						pass_counter++;//increase the password counter that count the characters of the pass
						key_pressed = NOT_PRESSED;//return the variable that holds the pressed key from keypad to its initial value
					}
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM
     60c:	86 e0       	ldi	r24, 0x06	; 6
     60e:	91 e0       	ldi	r25, 0x01	; 1
     610:	be 01       	movw	r22, r28
     612:	6f 5f       	subi	r22, 0xFF	; 255
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	44 e0       	ldi	r20, 0x04	; 4
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	0e 94 a5 0a 	call	0x154a	; 0x154a <EEPROM_vReadBlockFromAddress>

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
     61e:	ce 01       	movw	r24, r28
     620:	05 96       	adiw	r24, 0x05	; 5
     622:	be 01       	movw	r22, r28
     624:	6f 5f       	subi	r22, 0xFF	; 255
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	44 e0       	ldi	r20, 0x04	; 4
     62a:	0e 94 77 05 	call	0xaee	; 0xaee <ui8ComparePass>
     62e:	81 30       	cpi	r24, 0x01	; 1
     630:	19 f5       	brne	.+70     	; 0x678 <main+0x5e6>
					{
						login_mode = GUEST;
						pass_tries_count=0;//clear the counter of wrong tries
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     632:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Right pass");
     636:	83 e4       	ldi	r24, 0x43	; 67
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
						LCD_movecursor(2,1);
     63e:	82 e0       	ldi	r24, 0x02	; 2
     640:	61 e0       	ldi	r22, 0x01	; 1
     642:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
						LCD_vSend_string("Guest mode");
     646:	85 e6       	ldi	r24, 0x65	; 101
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     64e:	2f ef       	ldi	r18, 0xFF	; 255
     650:	34 e3       	ldi	r19, 0x34	; 52
     652:	4c e0       	ldi	r20, 0x0C	; 12
     654:	21 50       	subi	r18, 0x01	; 1
     656:	30 40       	sbci	r19, 0x00	; 0
     658:	40 40       	sbci	r20, 0x00	; 0
     65a:	e1 f7       	brne	.-8      	; 0x654 <main+0x5c2>
     65c:	00 c0       	rjmp	.+0      	; 0x65e <main+0x5cc>
     65e:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						LED_vTurnOn(GUEST_LED_PORT,GUEST_LED_PIN);//turn the led of gust mode that is connected to the master micro controller on
     660:	83 e4       	ldi	r24, 0x43	; 67
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	0e 94 ff 07 	call	0xffe	; 0xffe <LED_vTurnOn>
						timer0_initializeCTC();//start the counter of the session
     668:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <timer0_initializeCTC>
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     66c:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					EEPROM_vReadBlockFromAddress(EEPROM_GUEST_ADDRESS,stored_pass,PASS_SIZE);//Save the entire password in the EEPROM

					/*compare passwords*/
					if (ui8ComparePass(pass,stored_pass,PASS_SIZE)==TRUE)//in case of right password
					{
						login_mode = GUEST;
     670:	ee 24       	eor	r14, r14
     672:	68 94       	set
     674:	e1 f8       	bld	r14, 1
     676:	28 c0       	rjmp	.+80     	; 0x6c8 <main+0x636>
						timer0_initializeCTC();//start the counter of the session
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					}
					else//in case of wrong password
					{
						pass_tries_count++;//increase the number of wrong tries to block login if it exceeds the allowed tries
     678:	0f 5f       	subi	r16, 0xFF	; 255
						login_mode = NO_MODE;//set the mode as not logged in
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     67a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong pass");
     67e:	c1 01       	movw	r24, r2
     680:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
						LCD_movecursor(2,1);
     684:	82 e0       	ldi	r24, 0x02	; 2
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
						LCD_vSend_string("Tries left:");
     68c:	c5 01       	movw	r24, r10
     68e:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
						LCD_vSend_char(TRIES_ALLOWED-pass_tries_count+ASCII_ZERO);//print the number of tries left before block mode to be activated
     692:	8d 2d       	mov	r24, r13
     694:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	99 e6       	ldi	r25, 0x69	; 105
     69c:	a8 e1       	ldi	r26, 0x18	; 24
     69e:	81 50       	subi	r24, 0x01	; 1
     6a0:	90 40       	sbci	r25, 0x00	; 0
     6a2:	a0 40       	sbci	r26, 0x00	; 0
     6a4:	e1 f7       	brne	.-8      	; 0x69e <main+0x60c>
     6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0x616>
     6a8:	00 00       	nop
						_delay_ms(1000);//Halt the system for the given time in (ms)
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     6aa:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
     6ae:	da 94       	dec	r13
						if (pass_tries_count>=TRIES_ALLOWED)//if the condition of the block mode is true
     6b0:	03 30       	cpi	r16, 0x03	; 3
     6b2:	08 f4       	brcc	.+2      	; 0x6b6 <main+0x624>
     6b4:	69 cf       	rjmp	.-302    	; 0x588 <main+0x4f6>
						{
							EEPROM_vWriteByteToAddress(LOGIN_BLOCKED_ADDRESS,TRUE);//write to the EEPROM TRUE to the the block mode address
     6b6:	8a e0       	ldi	r24, 0x0A	; 10
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	61 e0       	ldi	r22, 0x01	; 1
     6bc:	0e 94 bd 0a 	call	0x157a	; 0x157a <EEPROM_vWriteByteToAddress>
							block_mode_flag = TRUE;//turn on block mode
							break;//breaks the loop of insert guest password #while(login_mode != GUEST)# line 228
     6c0:	e1 c1       	rjmp	.+962    	; 0xa84 <__stack+0x225>
			LED_vTurnOff(ADMIN_LED_PORT,ADMIN_LED_PIN);//turnoff the led of the admin
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Session Timeout");//print session timeout message
			_delay_ms(1000);//Halt the system for the given time in (ms)
		}
		while (login_mode==NO_MODE)//The user can only leave the loop only in case of he was logged in as guest or admin
     6c2:	ee 20       	and	r14, r14
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <main+0x636>
     6c6:	42 ce       	rjmp	.-892    	; 0x34c <main+0x2ba>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     6c8:	01 e0       	ldi	r16, 0x01	; 1
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
						LCD_vSend_string("Wrong input");//print error message
     6ca:	0f 2e       	mov	r0, r31
     6cc:	f7 eb       	ldi	r31, 0xB7	; 183
     6ce:	cf 2e       	mov	r12, r31
     6d0:	f1 e0       	ldi	r31, 0x01	; 1
     6d2:	df 2e       	mov	r13, r31
     6d4:	f0 2d       	mov	r31, r0
     6d6:	d0 c1       	rjmp	.+928    	; 0xa78 <__stack+0x219>
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
		{
			key_pressed = NOT_PRESSED;//Set the key pressed by the user to its default value
			switch (show_menu)
     6d8:	05 30       	cpi	r16, 0x05	; 5
     6da:	09 f4       	brne	.+2      	; 0x6de <main+0x64c>
     6dc:	14 c1       	rjmp	.+552    	; 0x906 <__stack+0xa7>
     6de:	06 30       	cpi	r16, 0x06	; 6
     6e0:	70 f4       	brcc	.+28     	; 0x6fe <main+0x66c>
     6e2:	02 30       	cpi	r16, 0x02	; 2
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <main+0x656>
     6e6:	86 c0       	rjmp	.+268    	; 0x7f4 <main+0x762>
     6e8:	03 30       	cpi	r16, 0x03	; 3
     6ea:	18 f4       	brcc	.+6      	; 0x6f2 <main+0x660>
     6ec:	01 30       	cpi	r16, 0x01	; 1
     6ee:	a1 f7       	brne	.-24     	; 0x6d8 <main+0x646>
     6f0:	1b c0       	rjmp	.+54     	; 0x728 <main+0x696>
     6f2:	03 30       	cpi	r16, 0x03	; 3
     6f4:	09 f4       	brne	.+2      	; 0x6f8 <main+0x666>
     6f6:	fb c0       	rjmp	.+502    	; 0x8ee <__stack+0x8f>
     6f8:	04 30       	cpi	r16, 0x04	; 4
     6fa:	71 f7       	brne	.-36     	; 0x6d8 <main+0x646>
     6fc:	fe c0       	rjmp	.+508    	; 0x8fa <__stack+0x9b>
     6fe:	08 30       	cpi	r16, 0x08	; 8
     700:	09 f4       	brne	.+2      	; 0x704 <main+0x672>
     702:	b8 c0       	rjmp	.+368    	; 0x874 <__stack+0x15>
     704:	09 30       	cpi	r16, 0x09	; 9
     706:	30 f4       	brcc	.+12     	; 0x714 <main+0x682>
     708:	06 30       	cpi	r16, 0x06	; 6
     70a:	09 f4       	brne	.+2      	; 0x70e <main+0x67c>
     70c:	02 c1       	rjmp	.+516    	; 0x912 <__stack+0xb3>
     70e:	07 30       	cpi	r16, 0x07	; 7
     710:	19 f7       	brne	.-58     	; 0x6d8 <main+0x646>
     712:	09 c1       	rjmp	.+530    	; 0x926 <__stack+0xc7>
     714:	09 30       	cpi	r16, 0x09	; 9
     716:	09 f4       	brne	.+2      	; 0x71a <main+0x688>
     718:	0c c1       	rjmp	.+536    	; 0x932 <__stack+0xd3>
     71a:	0a 30       	cpi	r16, 0x0A	; 10
     71c:	e9 f6       	brne	.-70     	; 0x6d8 <main+0x646>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     71e:	88 23       	and	r24, r24
     720:	09 f4       	brne	.+2      	; 0x724 <main+0x692>
     722:	0d c1       	rjmp	.+538    	; 0x93e <__stack+0xdf>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     724:	08 e0       	ldi	r16, 0x08	; 8
     726:	a8 c1       	rjmp	.+848    	; 0xa78 <__stack+0x219>
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_clearscreen();
					LCD_vSend_string("1:Room1 2:Room2");
     728:	0f 2e       	mov	r0, r31
     72a:	f7 e8       	ldi	r31, 0x87	; 135
     72c:	8f 2e       	mov	r8, r31
     72e:	f1 e0       	ldi	r31, 0x01	; 1
     730:	9f 2e       	mov	r9, r31
     732:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					if(login_mode==ADMIN)//check login mode
					{
						LCD_vSend_string("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
     734:	0f 2e       	mov	r0, r31
     736:	f7 e9       	ldi	r31, 0x97	; 151
     738:	6f 2e       	mov	r6, r31
     73a:	f1 e0       	ldi	r31, 0x01	; 1
     73c:	7f 2e       	mov	r7, r31
     73e:	f0 2d       	mov	r31, r0
					}
					else if(login_mode==GUEST)//check login mode
					{
						LCD_vSend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     740:	0f 2e       	mov	r0, r31
     742:	f7 ea       	ldi	r31, 0xA7	; 167
     744:	2f 2e       	mov	r2, r31
     746:	f1 e0       	ldi	r31, 0x01	; 1
     748:	3f 2e       	mov	r3, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	80 2f       	mov	r24, r16
     74e:	0e 2d       	mov	r16, r14
     750:	e8 2e       	mov	r14, r24
			{
				case MAIN_MENU:
				do
				{
					/******************** print main Menu ******************/
					LCD_clearscreen();
     752:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("1:Room1 2:Room2");
     756:	c4 01       	movw	r24, r8
     758:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					LCD_movecursor(2,1);
     75c:	82 e0       	ldi	r24, 0x02	; 2
     75e:	61 e0       	ldi	r22, 0x01	; 1
     760:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
					if(login_mode==ADMIN)//check login mode
     764:	01 30       	cpi	r16, 0x01	; 1
     766:	21 f4       	brne	.+8      	; 0x770 <main+0x6de>
					{
						LCD_vSend_string("3:Room3 4:More ");//this menu options only printed if the logged in user is an admin
     768:	c3 01       	movw	r24, r6
     76a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     76e:	05 c0       	rjmp	.+10     	; 0x77a <main+0x6e8>
					}
					else if(login_mode==GUEST)//check login mode
     770:	02 30       	cpi	r16, 0x02	; 2
     772:	19 f4       	brne	.+6      	; 0x77a <main+0x6e8>
					{
						LCD_vSend_string("3:Room3 4:Room4");//this menu options only printed if the logged in user is a guest
     774:	c1 01       	movw	r24, r2
     776:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					}
					/*******************************************************/
					
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     77a:	80 2f       	mov	r24, r16
     77c:	0e 94 93 05 	call	0xb26	; 0xb26 <u8GetKeyPressed>
     780:	18 2f       	mov	r17, r24
     782:	2f ef       	ldi	r18, 0xFF	; 255
     784:	30 e7       	ldi	r19, 0x70	; 112
     786:	42 e0       	ldi	r20, 0x02	; 2
     788:	21 50       	subi	r18, 0x01	; 1
     78a:	30 40       	sbci	r19, 0x00	; 0
     78c:	40 40       	sbci	r20, 0x00	; 0
     78e:	e1 f7       	brne	.-8      	; 0x788 <main+0x6f6>
     790:	00 c0       	rjmp	.+0      	; 0x792 <main+0x700>
     792:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
     794:	81 33       	cpi	r24, 0x31	; 49
     796:	09 f4       	brne	.+2      	; 0x79a <main+0x708>
     798:	79 c1       	rjmp	.+754    	; 0xa8c <__stack+0x22d>
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
     79a:	82 33       	cpi	r24, 0x32	; 50
     79c:	09 f4       	brne	.+2      	; 0x7a0 <main+0x70e>
     79e:	79 c1       	rjmp	.+754    	; 0xa92 <__stack+0x233>
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
     7a0:	83 33       	cpi	r24, 0x33	; 51
     7a2:	09 f4       	brne	.+2      	; 0x7a6 <main+0x714>
     7a4:	79 c1       	rjmp	.+754    	; 0xa98 <__stack+0x239>
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
     7a6:	84 33       	cpi	r24, 0x34	; 52
     7a8:	41 f4       	brne	.+16     	; 0x7ba <main+0x728>
     7aa:	02 30       	cpi	r16, 0x02	; 2
     7ac:	09 f4       	brne	.+2      	; 0x7b0 <main+0x71e>
     7ae:	77 c1       	rjmp	.+750    	; 0xa9e <__stack+0x23f>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == ADMIN_MORE_OPTION && login_mode == ADMIN)//If key pressed is 4 and the logged in user is admin
     7b0:	01 30       	cpi	r16, 0x01	; 1
     7b2:	29 f4       	brne	.+10     	; 0x7be <main+0x72c>
     7b4:	e0 2e       	mov	r14, r16
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     7b6:	02 e0       	ldi	r16, 0x02	; 2
     7b8:	5f c1       	rjmp	.+702    	; 0xa78 <__stack+0x219>
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     7ba:	8f 3f       	cpi	r24, 0xFF	; 255
     7bc:	91 f0       	breq	.+36     	; 0x7e2 <main+0x750>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7be:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     7c2:	c6 01       	movw	r24, r12
     7c4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	94 e3       	ldi	r25, 0x34	; 52
     7cc:	ac e0       	ldi	r26, 0x0C	; 12
     7ce:	81 50       	subi	r24, 0x01	; 1
     7d0:	90 40       	sbci	r25, 0x00	; 0
     7d2:	a0 40       	sbci	r26, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0x73c>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0x746>
     7d8:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while ( ((key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE) );//break the loop in case of valid key or time is out
     7da:	11 53       	subi	r17, 0x31	; 49
     7dc:	14 30       	cpi	r17, 0x04	; 4
     7de:	08 f4       	brcc	.+2      	; 0x7e2 <main+0x750>
     7e0:	48 c1       	rjmp	.+656    	; 0xa72 <__stack+0x213>
     7e2:	80 91 96 02 	lds	r24, 0x0296
     7e6:	88 23       	and	r24, r24
     7e8:	09 f4       	brne	.+2      	; 0x7ec <main+0x75a>
     7ea:	b3 cf       	rjmp	.-154    	; 0x752 <main+0x6c0>
     7ec:	8e 2d       	mov	r24, r14
     7ee:	e0 2e       	mov	r14, r16
     7f0:	08 2f       	mov	r16, r24
     7f2:	42 c1       	rjmp	.+644    	; 0xa78 <__stack+0x219>
				
				case MORE_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     7f4:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("1:Room4    2:TV   ");
     7f8:	83 ec       	ldi	r24, 0xC3	; 195
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					LCD_movecursor(2,1);
     800:	82 e0       	ldi	r24, 0x02	; 2
     802:	61 e0       	ldi	r22, 0x01	; 1
     804:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
					LCD_vSend_string("3:Air Cond.4:RET");
     808:	86 ed       	ldi	r24, 0xD6	; 214
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     810:	8e 2d       	mov	r24, r14
     812:	0e 94 93 05 	call	0xb26	; 0xb26 <u8GetKeyPressed>
     816:	18 2f       	mov	r17, r24
     818:	2f ef       	ldi	r18, 0xFF	; 255
     81a:	30 e7       	ldi	r19, 0x70	; 112
     81c:	42 e0       	ldi	r20, 0x02	; 2
     81e:	21 50       	subi	r18, 0x01	; 1
     820:	30 40       	sbci	r19, 0x00	; 0
     822:	40 40       	sbci	r20, 0x00	; 0
     824:	e1 f7       	brne	.-8      	; 0x81e <main+0x78c>
     826:	00 c0       	rjmp	.+0      	; 0x828 <main+0x796>
     828:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
     82a:	81 33       	cpi	r24, 0x31	; 49
     82c:	09 f4       	brne	.+2      	; 0x830 <main+0x79e>
     82e:	3a c1       	rjmp	.+628    	; 0xaa4 <__stack+0x245>
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
     830:	82 33       	cpi	r24, 0x32	; 50
     832:	09 f4       	brne	.+2      	; 0x836 <main+0x7a4>
     834:	39 c1       	rjmp	.+626    	; 0xaa8 <__stack+0x249>
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
     836:	83 33       	cpi	r24, 0x33	; 51
     838:	09 f4       	brne	.+2      	; 0x83c <main+0x7aa>
     83a:	38 c1       	rjmp	.+624    	; 0xaac <__stack+0x24d>
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
     83c:	84 33       	cpi	r24, 0x34	; 52
     83e:	09 f4       	brne	.+2      	; 0x842 <main+0x7b0>
     840:	37 c1       	rjmp	.+622    	; 0xab0 <__stack+0x251>
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     842:	8f 3f       	cpi	r24, 0xFF	; 255
     844:	91 f0       	breq	.+36     	; 0x86a <__stack+0xb>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     846:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     84a:	c6 01       	movw	r24, r12
     84c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     850:	8f ef       	ldi	r24, 0xFF	; 255
     852:	94 e3       	ldi	r25, 0x34	; 52
     854:	ac e0       	ldi	r26, 0x0C	; 12
     856:	81 50       	subi	r24, 0x01	; 1
     858:	90 40       	sbci	r25, 0x00	; 0
     85a:	a0 40       	sbci	r26, 0x00	; 0
     85c:	e1 f7       	brne	.-8      	; 0x856 <main+0x7c4>
     85e:	00 c0       	rjmp	.+0      	; 0x860 <__stack+0x1>
     860:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '1') || (key_pressed > '4') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     862:	11 53       	subi	r17, 0x31	; 49
     864:	14 30       	cpi	r17, 0x04	; 4
     866:	08 f4       	brcc	.+2      	; 0x86a <__stack+0xb>
     868:	07 c1       	rjmp	.+526    	; 0xa78 <__stack+0x219>
     86a:	80 91 96 02 	lds	r24, 0x0296
     86e:	88 23       	and	r24, r24
     870:	09 f2       	breq	.-126    	; 0x7f4 <main+0x762>
     872:	02 c1       	rjmp	.+516    	; 0xa78 <__stack+0x219>
				
				case AIRCONDITIONING_MENU:
				do
				{
					/******************** print more Menu ******************/
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     874:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("1:Set temperature ");
     878:	87 ee       	ldi	r24, 0xE7	; 231
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					LCD_movecursor(2,1);
     880:	82 e0       	ldi	r24, 0x02	; 2
     882:	61 e0       	ldi	r22, 0x01	; 1
     884:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
					LCD_vSend_string("2:Control  0:RET");
     888:	8a ef       	ldi	r24, 0xFA	; 250
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					/*******************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     890:	8e 2d       	mov	r24, r14
     892:	0e 94 93 05 	call	0xb26	; 0xb26 <u8GetKeyPressed>
     896:	18 2f       	mov	r17, r24
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	30 e7       	ldi	r19, 0x70	; 112
     89c:	42 e0       	ldi	r20, 0x02	; 2
     89e:	21 50       	subi	r18, 0x01	; 1
     8a0:	30 40       	sbci	r19, 0x00	; 0
     8a2:	40 40       	sbci	r20, 0x00	; 0
     8a4:	e1 f7       	brne	.-8      	; 0x89e <__stack+0x3f>
     8a6:	00 c0       	rjmp	.+0      	; 0x8a8 <__stack+0x49>
     8a8:	00 00       	nop
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
     8aa:	81 33       	cpi	r24, 0x31	; 49
     8ac:	09 f4       	brne	.+2      	; 0x8b0 <__stack+0x51>
     8ae:	02 c1       	rjmp	.+516    	; 0xab4 <__stack+0x255>
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
     8b0:	82 33       	cpi	r24, 0x32	; 50
     8b2:	09 f4       	brne	.+2      	; 0x8b6 <__stack+0x57>
     8b4:	01 c1       	rjmp	.+514    	; 0xab8 <__stack+0x259>
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
     8b6:	80 33       	cpi	r24, 0x30	; 48
     8b8:	09 f4       	brne	.+2      	; 0x8bc <__stack+0x5d>
     8ba:	00 c1       	rjmp	.+512    	; 0xabc <__stack+0x25d>
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
					}
					else if(key_pressed != NOT_PRESSED)//show wrong input message if the user pressed wrong key
     8bc:	8f 3f       	cpi	r24, 0xFF	; 255
     8be:	91 f0       	breq	.+36     	; 0x8e4 <__stack+0x85>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     8c0:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     8c4:	c6 01       	movw	r24, r12
     8c6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     8ca:	8f ef       	ldi	r24, 0xFF	; 255
     8cc:	94 e3       	ldi	r25, 0x34	; 52
     8ce:	ac e0       	ldi	r26, 0x0C	; 12
     8d0:	81 50       	subi	r24, 0x01	; 1
     8d2:	90 40       	sbci	r25, 0x00	; 0
     8d4:	a0 40       	sbci	r26, 0x00	; 0
     8d6:	e1 f7       	brne	.-8      	; 0x8d0 <__stack+0x71>
     8d8:	00 c0       	rjmp	.+0      	; 0x8da <__stack+0x7b>
     8da:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
					}
				} while (( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     8dc:	10 53       	subi	r17, 0x30	; 48
     8de:	13 30       	cpi	r17, 0x03	; 3
     8e0:	08 f4       	brcc	.+2      	; 0x8e4 <__stack+0x85>
     8e2:	ca c0       	rjmp	.+404    	; 0xa78 <__stack+0x219>
     8e4:	80 91 96 02 	lds	r24, 0x0296
     8e8:	88 23       	and	r24, r24
     8ea:	21 f2       	breq	.-120    	; 0x874 <__stack+0x15>
     8ec:	c5 c0       	rjmp	.+394    	; 0xa78 <__stack+0x219>
				break;//End of air conditioning menu case
				
				case ROOM1_MENU:
				vMenuOption(ROOM1_MENU,login_mode);//call the function that show the menu of room 1
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	6e 2d       	mov	r22, r14
     8f2:	0e 94 b4 05 	call	0xb68	; 0xb68 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     8f6:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room1 menu case
     8f8:	bf c0       	rjmp	.+382    	; 0xa78 <__stack+0x219>
				
				case ROOM2_MENU:
				vMenuOption(ROOM2_MENU,login_mode);//call the function that show the menu of room 2
     8fa:	84 e0       	ldi	r24, 0x04	; 4
     8fc:	6e 2d       	mov	r22, r14
     8fe:	0e 94 b4 05 	call	0xb68	; 0xb68 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     902:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room2 menu case
     904:	b9 c0       	rjmp	.+370    	; 0xa78 <__stack+0x219>
				
				case ROOM3_MENU:
				vMenuOption(ROOM3_MENU,login_mode);//call the function that show the menu of room 3
     906:	85 e0       	ldi	r24, 0x05	; 5
     908:	6e 2d       	mov	r22, r14
     90a:	0e 94 b4 05 	call	0xb68	; 0xb68 <vMenuOption>
				show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     90e:	01 e0       	ldi	r16, 0x01	; 1
				break;//End of room3 menu case
     910:	b3 c0       	rjmp	.+358    	; 0xa78 <__stack+0x219>
				
				case ROOM4_MENU:
				vMenuOption(ROOM4_MENU,login_mode);//call the function that show the menu of room 4
     912:	86 e0       	ldi	r24, 0x06	; 6
     914:	6e 2d       	mov	r22, r14
     916:	0e 94 b4 05 	call	0xb68	; 0xb68 <vMenuOption>
				if (login_mode == GUEST)//in case of guest is logged in
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	e9 16       	cp	r14, r25
     91e:	09 f0       	breq	.+2      	; 0x922 <__stack+0xc3>
     920:	a0 c0       	rjmp	.+320    	; 0xa62 <__stack+0x203>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     922:	01 e0       	ldi	r16, 0x01	; 1
     924:	a9 c0       	rjmp	.+338    	; 0xa78 <__stack+0x219>
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
				}
				break;//End of room4 menu case
				
				case TV_MENU:
				vMenuOption(TV_MENU,login_mode);//call the function that show the menu of tv
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	6e 2d       	mov	r22, r14
     92a:	0e 94 b4 05 	call	0xb68	; 0xb68 <vMenuOption>
				show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     92e:	02 e0       	ldi	r16, 0x02	; 2
				break;//End of TV menu case
     930:	a3 c0       	rjmp	.+326    	; 0xa78 <__stack+0x219>
				
				case AIRCOND_CTRL_MENU:
				vMenuOption(AIRCOND_CTRL_MENU,login_mode);//call the function that show the menu of Air conditioning control
     932:	89 e0       	ldi	r24, 0x09	; 9
     934:	6e 2d       	mov	r22, r14
     936:	0e 94 b4 05 	call	0xb68	; 0xb68 <vMenuOption>
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     93a:	08 e0       	ldi	r16, 0x08	; 8
				break;//End of air conditioning control menu case
     93c:	9d c0       	rjmp	.+314    	; 0xa78 <__stack+0x219>
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
				{
					key_pressed = NOT_PRESSED;//set the key pressed to the default value
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     93e:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("Set temp.:__ ");//print the format of inserting temperature
     942:	8b e0       	ldi	r24, 0x0B	; 11
     944:	92 e0       	ldi	r25, 0x02	; 2
     946:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
					LCD_vSend_char(DEGREES_SYMBOL); // print the symbol of degree
     94a:	8f ed       	ldi	r24, 0xDF	; 223
     94c:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
					LCD_vSend_char('C'); // print the C character
     950:	83 e4       	ldi	r24, 0x43	; 67
     952:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
					LCD_movecursor(1,11);//move the cursor to the place to write the entered temperature
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	6b e0       	ldi	r22, 0x0B	; 11
     95a:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
     95e:	2f ef       	ldi	r18, 0xFF	; 255
     960:	31 ee       	ldi	r19, 0xE1	; 225
     962:	44 e0       	ldi	r20, 0x04	; 4
     964:	21 50       	subi	r18, 0x01	; 1
     966:	30 40       	sbci	r19, 0x00	; 0
     968:	40 40       	sbci	r20, 0x00	; 0
     96a:	e1 f7       	brne	.-8      	; 0x964 <__stack+0x105>
     96c:	00 c0       	rjmp	.+0      	; 0x96e <__stack+0x10f>
     96e:	00 00       	nop
					_delay_ms(200);//Halt the system for the given time in (ms)
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     970:	8e 2d       	mov	r24, r14
     972:	0e 94 93 05 	call	0xb26	; 0xb26 <u8GetKeyPressed>
     976:	2f e7       	ldi	r18, 0x7F	; 127
     978:	3a e1       	ldi	r19, 0x1A	; 26
     97a:	46 e0       	ldi	r20, 0x06	; 6
     97c:	21 50       	subi	r18, 0x01	; 1
     97e:	30 40       	sbci	r19, 0x00	; 0
     980:	40 40       	sbci	r20, 0x00	; 0
     982:	e1 f7       	brne	.-8      	; 0x97c <__stack+0x11d>
     984:	00 c0       	rjmp	.+0      	; 0x986 <__stack+0x127>
     986:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key

					if (timeout_flag == TRUE) //in case of the time is out before the user press a key
     988:	90 91 96 02 	lds	r25, 0x0296
     98c:	91 30       	cpi	r25, 0x01	; 1
     98e:	09 f4       	brne	.+2      	; 0x992 <__stack+0x133>
     990:	6a c0       	rjmp	.+212    	; 0xa66 <__stack+0x207>
					{
						break;//break the loop that ask for temperature
					}
					if (key_pressed <'0' || key_pressed >'9')//show wrong input message if the user entered non numeric value
     992:	18 2f       	mov	r17, r24
     994:	10 53       	subi	r17, 0x30	; 48
     996:	1a 30       	cpi	r17, 0x0A	; 10
     998:	78 f0       	brcs	.+30     	; 0x9b8 <__stack+0x159>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     99a:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     99e:	c6 01       	movw	r24, r12
     9a0:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     9a4:	8f ef       	ldi	r24, 0xFF	; 255
     9a6:	94 e3       	ldi	r25, 0x34	; 52
     9a8:	ac e0       	ldi	r26, 0x0C	; 12
     9aa:	81 50       	subi	r24, 0x01	; 1
     9ac:	90 40       	sbci	r25, 0x00	; 0
     9ae:	a0 40       	sbci	r26, 0x00	; 0
     9b0:	e1 f7       	brne	.-8      	; 0x9aa <__stack+0x14b>
     9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <__stack+0x155>
     9b4:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//return to #while (temperature==0)# line 672
     9b6:	4e c0       	rjmp	.+156    	; 0xa54 <__stack+0x1f5>
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
     9b8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
						temp_tens = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					/*******************************************************************************/
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
     9bc:	8e 2d       	mov	r24, r14
     9be:	0e 94 93 05 	call	0xb26	; 0xb26 <u8GetKeyPressed>
     9c2:	2f e7       	ldi	r18, 0x7F	; 127
     9c4:	3a e1       	ldi	r19, 0x1A	; 26
     9c6:	46 e0       	ldi	r20, 0x06	; 6
     9c8:	21 50       	subi	r18, 0x01	; 1
     9ca:	30 40       	sbci	r19, 0x00	; 0
     9cc:	40 40       	sbci	r20, 0x00	; 0
     9ce:	e1 f7       	brne	.-8      	; 0x9c8 <__stack+0x169>
     9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <__stack+0x173>
     9d2:	00 00       	nop
					_delay_ms(250);//to avoid the duplication of the pressed key
					
					if (timeout_flag == TRUE)//if the user session is timeout
     9d4:	90 91 96 02 	lds	r25, 0x0296
     9d8:	91 30       	cpi	r25, 0x01	; 1
     9da:	09 f4       	brne	.+2      	; 0x9de <__stack+0x17f>
     9dc:	46 c0       	rjmp	.+140    	; 0xa6a <__stack+0x20b>
					{
						break;//break the loop that ask for temperature
					}
					if ((key_pressed <'0' || key_pressed >'9'))//show wrong input message if the user entered non numeric value
     9de:	08 2f       	mov	r16, r24
     9e0:	00 53       	subi	r16, 0x30	; 48
     9e2:	0a 30       	cpi	r16, 0x0A	; 10
     9e4:	78 f0       	brcs	.+30     	; 0xa04 <__stack+0x1a5>
					{
						LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     9e6:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
						LCD_vSend_string("Wrong input");//print error message
     9ea:	c6 01       	movw	r24, r12
     9ec:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     9f0:	8f ef       	ldi	r24, 0xFF	; 255
     9f2:	94 e3       	ldi	r25, 0x34	; 52
     9f4:	ac e0       	ldi	r26, 0x0C	; 12
     9f6:	81 50       	subi	r24, 0x01	; 1
     9f8:	90 40       	sbci	r25, 0x00	; 0
     9fa:	a0 40       	sbci	r26, 0x00	; 0
     9fc:	e1 f7       	brne	.-8      	; 0x9f6 <__stack+0x197>
     9fe:	00 c0       	rjmp	.+0      	; 0xa00 <__stack+0x1a1>
     a00:	00 00       	nop
						_delay_ms(500);//Halt the system for the given time in (ms)
						continue;//repeat the loop that ask for the temperature
     a02:	28 c0       	rjmp	.+80     	; 0xa54 <__stack+0x1f5>
					}
					else//if the value is valid
					{
						LCD_vSend_char(key_pressed);//print the value on the lcd
     a04:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
						temp_ones = key_pressed-ASCII_ZERO;//save the entered value
						key_pressed = NOT_PRESSED;//set the key pressed to the default value
					}
					temperature = temp_tens*10 + temp_ones;//set the value of the temperature from the given separated values
     a08:	11 0f       	add	r17, r17
     a0a:	81 2f       	mov	r24, r17
     a0c:	88 0f       	add	r24, r24
     a0e:	88 0f       	add	r24, r24
     a10:	18 0f       	add	r17, r24
     a12:	10 0f       	add	r17, r16
					SPI_ui8TransmitRecive(SET_TEMPERATURE);//Send the code of set temperature
     a14:	80 e4       	ldi	r24, 0x40	; 64
     a16:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_ui8TransmitRecive>
     a1a:	2f ef       	ldi	r18, 0xFF	; 255
     a1c:	31 ee       	ldi	r19, 0xE1	; 225
     a1e:	44 e0       	ldi	r20, 0x04	; 4
     a20:	21 50       	subi	r18, 0x01	; 1
     a22:	30 40       	sbci	r19, 0x00	; 0
     a24:	40 40       	sbci	r20, 0x00	; 0
     a26:	e1 f7       	brne	.-8      	; 0xa20 <__stack+0x1c1>
     a28:	00 c0       	rjmp	.+0      	; 0xa2a <__stack+0x1cb>
     a2a:	00 00       	nop
					_delay_ms(200);//Halt the system to prevent write collision
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
     a2c:	81 2f       	mov	r24, r17
     a2e:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_ui8TransmitRecive>
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     a32:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
					LCD_vSend_string("Temperature Sent");//show the message
     a36:	89 e1       	ldi	r24, 0x19	; 25
     a38:	92 e0       	ldi	r25, 0x02	; 2
     a3a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     a3e:	8f ef       	ldi	r24, 0xFF	; 255
     a40:	94 e3       	ldi	r25, 0x34	; 52
     a42:	ac e0       	ldi	r26, 0x0C	; 12
     a44:	81 50       	subi	r24, 0x01	; 1
     a46:	90 40       	sbci	r25, 0x00	; 0
     a48:	a0 40       	sbci	r26, 0x00	; 0
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <__stack+0x1e5>
     a4c:	00 c0       	rjmp	.+0      	; 0xa4e <__stack+0x1ef>
     a4e:	00 00       	nop
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
				break;//End of air conditioning control menu case
				
				case TEMPERATURE_MENU:
				temperature = 0;//clear the value of temperature
				while (temperature==0 && timeout_flag == FALSE)//start the loop that asks for the temperature from the user in case of the time is not out
     a50:	11 23       	and	r17, r17
     a52:	69 f4       	brne	.+26     	; 0xa6e <__stack+0x20f>
     a54:	80 91 96 02 	lds	r24, 0x0296
     a58:	88 23       	and	r24, r24
     a5a:	09 f4       	brne	.+2      	; 0xa5e <__stack+0x1ff>
     a5c:	70 cf       	rjmp	.-288    	; 0x93e <__stack+0xdf>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     a5e:	08 e0       	ldi	r16, 0x08	; 8
     a60:	0b c0       	rjmp	.+22     	; 0xa78 <__stack+0x219>
				{
					show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
				}
				else//in case of admin is logged in
				{
					show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     a62:	02 e0       	ldi	r16, 0x02	; 2
     a64:	09 c0       	rjmp	.+18     	; 0xa78 <__stack+0x219>
					SPI_ui8TransmitRecive(temperature);//send the entered temperature
					LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
					LCD_vSend_string("Temperature Sent");//show the message
					_delay_ms(500);//Halt the system for the given time in (ms)
				}
				show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to air conditioning menu
     a66:	08 e0       	ldi	r16, 0x08	; 8
     a68:	07 c0       	rjmp	.+14     	; 0xa78 <__stack+0x219>
     a6a:	08 e0       	ldi	r16, 0x08	; 8
     a6c:	05 c0       	rjmp	.+10     	; 0xa78 <__stack+0x219>
     a6e:	08 e0       	ldi	r16, 0x08	; 8
     a70:	03 c0       	rjmp	.+6      	; 0xa78 <__stack+0x219>
     a72:	8e 2d       	mov	r24, r14
     a74:	e0 2e       	mov	r14, r16
     a76:	08 2f       	mov	r16, r24
		
		/*************************************************************************************************/
		uint8 show_menu = MAIN_MENU;
		
		
		while(timeout_flag!=TRUE)//Show the menu in case of the time is not out
     a78:	80 91 96 02 	lds	r24, 0x0296
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	09 f4       	brne	.+2      	; 0xa82 <__stack+0x223>
     a80:	2f cc       	rjmp	.-1954   	; 0x2e0 <main+0x24e>
     a82:	2a ce       	rjmp	.-940    	; 0x6d8 <main+0x646>
		if ( timeout_flag==TRUE )//check for timeout
		{//if timeout flag was raised
			timer0_stop();//stop the timer that increase the session counter
			session_counter = 0;//clear session counter
			timeout_flag=FALSE;//clear time out flag
			login_mode=NO_MODE;//log the user out
     a84:	1f ef       	ldi	r17, 0xFF	; 255
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	9b 87       	std	Y+11, r25	; 0x0b
     a8a:	60 cc       	rjmp	.-1856   	; 0x34c <main+0x2ba>
     a8c:	e0 2e       	mov	r14, r16
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM1)//If key pressed is 1
					{
						show_menu = ROOM1_MENU;//Set the next menu to be shown to room1 menu
     a8e:	03 e0       	ldi	r16, 0x03	; 3
     a90:	f3 cf       	rjmp	.-26     	; 0xa78 <__stack+0x219>
     a92:	e0 2e       	mov	r14, r16
					}
					else if (key_pressed == SELECT_ROOM2)//If key pressed is 2
					{
						show_menu = ROOM2_MENU;//Set the next menu to be shown to room2 menu
     a94:	04 e0       	ldi	r16, 0x04	; 4
     a96:	f0 cf       	rjmp	.-32     	; 0xa78 <__stack+0x219>
     a98:	e0 2e       	mov	r14, r16
					}
					else if (key_pressed == SELECT_ROOM3)//If key pressed is 3
					{
						show_menu = ROOM3_MENU;//Set the next menu to be shown to room3 menu
     a9a:	05 e0       	ldi	r16, 0x05	; 5
     a9c:	ed cf       	rjmp	.-38     	; 0xa78 <__stack+0x219>
     a9e:	e0 2e       	mov	r14, r16
					}
					else if (key_pressed == SELECT_ROOM4 && login_mode == GUEST)//If key pressed is 4 and the logged in user is guest
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     aa0:	06 e0       	ldi	r16, 0x06	; 6
     aa2:	ea cf       	rjmp	.-44     	; 0xa78 <__stack+0x219>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_ROOM4_ADMIN)//If key pressed is 1
					{
						show_menu = ROOM4_MENU;//Set the next menu to be shown to room4 menu
     aa4:	06 e0       	ldi	r16, 0x06	; 6
     aa6:	e8 cf       	rjmp	.-48     	; 0xa78 <__stack+0x219>
					}
					else if (key_pressed == SELECT_TV)//If key pressed is 2
					{
						show_menu = TV_MENU;//Set the next menu to be shown to TV menu
     aa8:	07 e0       	ldi	r16, 0x07	; 7
     aaa:	e6 cf       	rjmp	.-52     	; 0xa78 <__stack+0x219>
					}
					else if (key_pressed == SELECT_AIR_CONDITIONING)//If key pressed is 3
					{ 
						show_menu = AIRCONDITIONING_MENU;//Set the next menu to be shown to Air conditioning menu
     aac:	08 e0       	ldi	r16, 0x08	; 8
     aae:	e4 cf       	rjmp	.-56     	; 0xa78 <__stack+0x219>
					}
					else if (key_pressed == ADMIN_RET_OPTION)//If key pressed is 4 (RET)
					{
						show_menu = MAIN_MENU;//Set the next menu to be shown to main menu
     ab0:	01 e0       	ldi	r16, 0x01	; 1
     ab2:	e2 cf       	rjmp	.-60     	; 0xa78 <__stack+0x219>
					key_pressed = u8GetKeyPressed(login_mode);//wait for the user till key is pressed or the time is out
					_delay_ms(100);//to avoid the duplication of the pressed key
					
					if (key_pressed == SELECT_SET_TEMPERATURE)//If key pressed is 1
					{
						show_menu = TEMPERATURE_MENU;//Set the next menu to be shown to set temperature menu
     ab4:	0a e0       	ldi	r16, 0x0A	; 10
     ab6:	e0 cf       	rjmp	.-64     	; 0xa78 <__stack+0x219>
					}
					else if (key_pressed == SELECT_AIR_COND_CTRL)//If key pressed is 2
					{
						show_menu = AIRCOND_CTRL_MENU;//Set the next menu to be shown to air conditioning control menu
     ab8:	09 e0       	ldi	r16, 0x09	; 9
     aba:	de cf       	rjmp	.-68     	; 0xa78 <__stack+0x219>
					}
					else if (key_pressed == SELECT_AIR_COND_RET)//If key pressed is 0
					{
						show_menu = MORE_MENU;//Set the next menu to be shown to more menu
     abc:	02 e0       	ldi	r16, 0x02	; 2
     abe:	dc cf       	rjmp	.-72     	; 0xa78 <__stack+0x219>

00000ac0 <__vector_10>:
		}//End of while that repeats the menu after each successful action till session timeout
	}// end of the main while(1)
}//end of main function

ISR(TIMER0_COMP_vect)
{
     ac0:	1f 92       	push	r1
     ac2:	0f 92       	push	r0
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	0f 92       	push	r0
     ac8:	11 24       	eor	r1, r1
     aca:	8f 93       	push	r24
     acc:	9f 93       	push	r25
	session_counter++;//increase the indicator of session time for every tick
     ace:	80 91 97 02 	lds	r24, 0x0297
     ad2:	90 91 98 02 	lds	r25, 0x0298
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	90 93 98 02 	sts	0x0298, r25
     adc:	80 93 97 02 	sts	0x0297, r24
     ae0:	9f 91       	pop	r25
     ae2:	8f 91       	pop	r24
     ae4:	0f 90       	pop	r0
     ae6:	0f be       	out	0x3f, r0	; 63
     ae8:	0f 90       	pop	r0
     aea:	1f 90       	pop	r1
     aec:	18 95       	reti

00000aee <ui8ComparePass>:

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
     aee:	44 23       	and	r20, r20
     af0:	a1 f0       	breq	.+40     	; 0xb1a <ui8ComparePass+0x2c>
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
     af2:	fc 01       	movw	r30, r24
     af4:	30 81       	ld	r19, Z
     af6:	fb 01       	movw	r30, r22
     af8:	20 81       	ld	r18, Z
     afa:	32 17       	cp	r19, r18
     afc:	81 f4       	brne	.+32     	; 0xb1e <ui8ComparePass+0x30>
#include "menu.h"

extern volatile uint16 session_counter;//Stores the session time
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
     afe:	dc 01       	movw	r26, r24
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	31 96       	adiw	r30, 0x01	; 1
{
	uint8 pin_counter=0;//the offset of the character of the pin
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <ui8ComparePass+0x22>
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
     b08:	2d 91       	ld	r18, X+
     b0a:	91 91       	ld	r25, Z+
     b0c:	29 17       	cp	r18, r25
     b0e:	49 f4       	brne	.+18     	; 0xb22 <ui8ComparePass+0x34>
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
     b10:	8f 5f       	subi	r24, 0xFF	; 255

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
	while (pin_counter<size)//loop till the pin is fully entered
     b12:	84 17       	cp	r24, r20
     b14:	c9 f7       	brne	.-14     	; 0xb08 <ui8ComparePass+0x1a>
extern uint8 timeout_flag;//stores if the session is still valid or outdated

uint8 ui8ComparePass(const uint8* pass1,const uint8* pass2,const uint8 size)
{
	uint8 pin_counter=0;//the offset of the character of the pin
	uint8 ret_value = TRUE;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	08 95       	ret
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	08 95       	ret
	while (pin_counter<size)//loop till the pin is fully entered
	{
		if (*(pass1+pin_counter)!=*(pass2+pin_counter))//if the two characters of the entered pin and the stored pin are not equal
		{
			ret_value= FALSE;//returns false that means the two PINs are not equal
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	08 95       	ret
     b22:	80 e0       	ldi	r24, 0x00	; 0
			break;//break the loop
		}
		pin_counter++;//increase thee offset by one
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}
     b24:	08 95       	ret

00000b26 <u8GetKeyPressed>:
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
     b26:	cf 93       	push	r28
     b28:	c8 2f       	mov	r28, r24
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
	{
		if ( (session_counter >= ADMIN_TIMEOUT && u8LoginMode == ADMIN) || ( session_counter >= GUEST_TIMEOUT && u8LoginMode == GUEST ))//check for timeout
     b2a:	80 91 97 02 	lds	r24, 0x0297
     b2e:	90 91 98 02 	lds	r25, 0x0298
     b32:	2b e0       	ldi	r18, 0x0B	; 11
     b34:	88 3b       	cpi	r24, 0xB8	; 184
     b36:	92 07       	cpc	r25, r18
     b38:	10 f0       	brcs	.+4      	; 0xb3e <u8GetKeyPressed+0x18>
     b3a:	c1 30       	cpi	r28, 0x01	; 1
     b3c:	51 f0       	breq	.+20     	; 0xb52 <u8GetKeyPressed+0x2c>
     b3e:	80 91 97 02 	lds	r24, 0x0297
     b42:	90 91 98 02 	lds	r25, 0x0298
     b46:	27 e0       	ldi	r18, 0x07	; 7
     b48:	80 3d       	cpi	r24, 0xD0	; 208
     b4a:	92 07       	cpc	r25, r18
     b4c:	38 f0       	brcs	.+14     	; 0xb5c <u8GetKeyPressed+0x36>
     b4e:	c2 30       	cpi	r28, 0x02	; 2
     b50:	29 f4       	brne	.+10     	; 0xb5c <u8GetKeyPressed+0x36>
		{
			timeout_flag = TRUE;//set timeout flag to true
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	80 93 96 02 	sts	0x0296, r24
			break;//break the loop that wait for input from the user
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <u8GetKeyPressed+0x3e>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
     b5c:	0e 94 f6 06 	call	0xdec	; 0xdec <keypad_u8check_press>
}

uint8 u8GetKeyPressed(const uint8 u8LoginMode)
{
	uint8 key_pressed = NOT_PRESSED;
	while (key_pressed == NOT_PRESSED)//repeat till the user press any key
     b60:	8f 3f       	cpi	r24, 0xFF	; 255
     b62:	19 f3       	breq	.-58     	; 0xb2a <u8GetKeyPressed+0x4>
		}
		
		key_pressed = keypad_u8check_press();//if the user pressed any button in keypad save the value in key_pressed
	}
	return key_pressed;
     b64:	cf 91       	pop	r28
     b66:	08 95       	ret

00000b68 <vMenuOption>:
	}
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	d8 2f       	mov	r29, r24
     b8c:	06 2f       	mov	r16, r22
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
	uint8 u8TurnOffCode = 0;//turn off the device or room
     b8e:	ee 24       	eor	r14, r14
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
	uint8 u8TurnOnCode  = 0;//turn on the room or the device code
     b90:	ff 24       	eor	r15, r15
	return ret_value;//returns false that means the two PINs are equal since all characters of the PINs are equal
}

void vMenuOption(const uint8 u8SelectedRoom,const uint8 u8LoginMode)
{
	uint8 u8StatusCode  = 0;//demand status code
     b92:	10 e0       	ldi	r17, 0x00	; 0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
     b94:	0f 2e       	mov	r0, r31
     b96:	f3 e1       	ldi	r31, 0x13	; 19
     b98:	5f 2e       	mov	r5, r31
     b9a:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     b9c:	0f 2e       	mov	r0, r31
     b9e:	f5 e1       	ldi	r31, 0x15	; 21
     ba0:	4f 2e       	mov	r4, r31
     ba2:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
     ba4:	0f 2e       	mov	r0, r31
     ba6:	f4 e1       	ldi	r31, 0x14	; 20
     ba8:	3f 2e       	mov	r3, r31
     baa:	f0 2d       	mov	r31, r0
		{
			LCD_vSend_string("ON");//print the status on
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
     bac:	0f 2e       	mov	r0, r31
     bae:	f4 e6       	ldi	r31, 0x64	; 100
     bb0:	af 2e       	mov	r10, r31
     bb2:	f2 e0       	ldi	r31, 0x02	; 2
     bb4:	bf 2e       	mov	r11, r31
     bb6:	f0 2d       	mov	r31, r0
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
		if(response == ON_STATUS)//if the response from the slave was on status
		{
			LCD_vSend_string("ON");//print the status on
     bb8:	0f 2e       	mov	r0, r31
     bba:	f1 e6       	ldi	r31, 0x61	; 97
     bbc:	8f 2e       	mov	r8, r31
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	9f 2e       	mov	r9, r31
     bc2:	f0 2d       	mov	r31, r0
		{
			LCD_vSend_string("OFF");//print the status off
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
     bc4:	0f 2e       	mov	r0, r31
     bc6:	f8 e6       	ldi	r31, 0x68	; 104
     bc8:	cf 2e       	mov	r12, r31
     bca:	f2 e0       	ldi	r31, 0x02	; 2
     bcc:	df 2e       	mov	r13, r31
     bce:	f0 2d       	mov	r31, r0
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
			LCD_vSend_string("Wrong input");//print error message
     bd0:	0f 2e       	mov	r0, r31
     bd2:	f9 e7       	ldi	r31, 0x79	; 121
     bd4:	6f 2e       	mov	r6, r31
     bd6:	f2 e0       	ldi	r31, 0x02	; 2
     bd8:	7f 2e       	mov	r7, r31
     bda:	f0 2d       	mov	r31, r0
	uint8 response      = DEFAULT_ACK;//the response of the slave that is sent back based on the command of the master
	uint8 key_pressed   = NOT_PRESSED;//the key that is entered by the user
	
	do
	{
		LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     bdc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
     be0:	d5 30       	cpi	r29, 0x05	; 5
     be2:	61 f1       	breq	.+88     	; 0xc3c <vMenuOption+0xd4>
     be4:	d6 30       	cpi	r29, 0x06	; 6
     be6:	30 f4       	brcc	.+12     	; 0xbf4 <vMenuOption+0x8c>
     be8:	d3 30       	cpi	r29, 0x03	; 3
     bea:	61 f0       	breq	.+24     	; 0xc04 <vMenuOption+0x9c>
     bec:	d4 30       	cpi	r29, 0x04	; 4
     bee:	09 f0       	breq	.+2      	; 0xbf2 <vMenuOption+0x8a>
     bf0:	5c c0       	rjmp	.+184    	; 0xcaa <vMenuOption+0x142>
     bf2:	16 c0       	rjmp	.+44     	; 0xc20 <vMenuOption+0xb8>
     bf4:	d7 30       	cpi	r29, 0x07	; 7
     bf6:	f1 f1       	breq	.+124    	; 0xc74 <vMenuOption+0x10c>
     bf8:	d7 30       	cpi	r29, 0x07	; 7
     bfa:	70 f1       	brcs	.+92     	; 0xc58 <vMenuOption+0xf0>
     bfc:	d9 30       	cpi	r29, 0x09	; 9
     bfe:	09 f0       	breq	.+2      	; 0xc02 <vMenuOption+0x9a>
     c00:	54 c0       	rjmp	.+168    	; 0xcaa <vMenuOption+0x142>
     c02:	46 c0       	rjmp	.+140    	; 0xc90 <vMenuOption+0x128>
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
     c04:	8a e2       	ldi	r24, 0x2A	; 42
     c06:	92 e0       	ldi	r25, 0x02	; 2
     c08:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
     c0c:	0f 2e       	mov	r0, r31
     c0e:	f1 e3       	ldi	r31, 0x31	; 49
     c10:	ef 2e       	mov	r14, r31
     c12:	f0 2d       	mov	r31, r0
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
			u8TurnOnCode = ROOM1_TURN_ON;
     c14:	0f 2e       	mov	r0, r31
     c16:	f1 e2       	ldi	r31, 0x21	; 33
     c18:	ff 2e       	mov	r15, r31
     c1a:	f0 2d       	mov	r31, r0
		
		/*********** ****************Set the commands to be sent to the slave based on  the sent room or device ******************************/
		switch(u8SelectedRoom)
		{
			case ROOM1_MENU:
			u8StatusCode = ROOM1_STATUS;
     c1c:	11 e1       	ldi	r17, 0x11	; 17
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
     c1e:	45 c0       	rjmp	.+138    	; 0xcaa <vMenuOption+0x142>
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
     c20:	83 e3       	ldi	r24, 0x33	; 51
     c22:	92 e0       	ldi	r25, 0x02	; 2
     c24:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
     c28:	0f 2e       	mov	r0, r31
     c2a:	f2 e3       	ldi	r31, 0x32	; 50
     c2c:	ef 2e       	mov	r14, r31
     c2e:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
			u8TurnOnCode = ROOM2_TURN_ON;
     c30:	0f 2e       	mov	r0, r31
     c32:	f2 e2       	ldi	r31, 0x22	; 34
     c34:	ff 2e       	mov	r15, r31
     c36:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM1_TURN_ON;
			u8TurnOffCode = ROOM1_TURN_OFF;
			LCD_vSend_string("Room1 S:");
			break;
			case ROOM2_MENU:
			u8StatusCode = ROOM2_STATUS;
     c38:	12 e1       	ldi	r17, 0x12	; 18
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
     c3a:	37 c0       	rjmp	.+110    	; 0xcaa <vMenuOption+0x142>
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
     c3c:	8c e3       	ldi	r24, 0x3C	; 60
     c3e:	92 e0       	ldi	r25, 0x02	; 2
     c40:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
     c44:	0f 2e       	mov	r0, r31
     c46:	f3 e3       	ldi	r31, 0x33	; 51
     c48:	ef 2e       	mov	r14, r31
     c4a:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
			u8TurnOnCode = ROOM3_TURN_ON;
     c4c:	0f 2e       	mov	r0, r31
     c4e:	f3 e2       	ldi	r31, 0x23	; 35
     c50:	ff 2e       	mov	r15, r31
     c52:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM2_TURN_ON;
			u8TurnOffCode = ROOM2_TURN_OFF;
			LCD_vSend_string("Room2 S:");
			break;
			case ROOM3_MENU:
			u8StatusCode = ROOM3_STATUS;
     c54:	15 2d       	mov	r17, r5
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
     c56:	29 c0       	rjmp	.+82     	; 0xcaa <vMenuOption+0x142>
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
     c58:	85 e4       	ldi	r24, 0x45	; 69
     c5a:	92 e0       	ldi	r25, 0x02	; 2
     c5c:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
     c60:	0f 2e       	mov	r0, r31
     c62:	f4 e3       	ldi	r31, 0x34	; 52
     c64:	ef 2e       	mov	r14, r31
     c66:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
			u8TurnOnCode = ROOM4_TURN_ON;
     c68:	0f 2e       	mov	r0, r31
     c6a:	f4 e2       	ldi	r31, 0x24	; 36
     c6c:	ff 2e       	mov	r15, r31
     c6e:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM3_TURN_ON;
			u8TurnOffCode = ROOM3_TURN_OFF;
			LCD_vSend_string("Room3 S:");
			break;
			case ROOM4_MENU:
			u8StatusCode = ROOM4_STATUS;
     c70:	13 2d       	mov	r17, r3
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
     c72:	1b c0       	rjmp	.+54     	; 0xcaa <vMenuOption+0x142>
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
     c74:	8e e4       	ldi	r24, 0x4E	; 78
     c76:	92 e0       	ldi	r25, 0x02	; 2
     c78:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
     c7c:	0f 2e       	mov	r0, r31
     c7e:	f5 e3       	ldi	r31, 0x35	; 53
     c80:	ef 2e       	mov	r14, r31
     c82:	f0 2d       	mov	r31, r0
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
			u8TurnOnCode = TV_TURN_ON;
     c84:	0f 2e       	mov	r0, r31
     c86:	f5 e2       	ldi	r31, 0x25	; 37
     c88:	ff 2e       	mov	r15, r31
     c8a:	f0 2d       	mov	r31, r0
			u8TurnOnCode = ROOM4_TURN_ON;
			u8TurnOffCode = ROOM4_TURN_OFF;
			LCD_vSend_string("Room4 S:");
			break;
			case TV_MENU:
			u8StatusCode = TV_STATUS;
     c8c:	14 2d       	mov	r17, r4
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
     c8e:	0d c0       	rjmp	.+26     	; 0xcaa <vMenuOption+0x142>
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
			LCD_vSend_string("Air Cond. S:");
     c90:	84 e5       	ldi	r24, 0x54	; 84
     c92:	92 e0       	ldi	r25, 0x02	; 2
     c94:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
			u8TurnOffCode = AIR_COND_TURN_OFF;
     c98:	0f 2e       	mov	r0, r31
     c9a:	f6 e3       	ldi	r31, 0x36	; 54
     c9c:	ef 2e       	mov	r14, r31
     c9e:	f0 2d       	mov	r31, r0
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
			u8TurnOnCode = AIR_COND_TURN_ON;
     ca0:	0f 2e       	mov	r0, r31
     ca2:	f6 e2       	ldi	r31, 0x26	; 38
     ca4:	ff 2e       	mov	r15, r31
     ca6:	f0 2d       	mov	r31, r0
			u8TurnOnCode = TV_TURN_ON;
			u8TurnOffCode = TV_TURN_OFF;
			LCD_vSend_string("TV S:");
			break;
			case AIRCOND_CTRL_MENU:
			u8StatusCode = AIR_COND_STATUS;
     ca8:	16 e1       	ldi	r17, 0x16	; 22
			LCD_vSend_string("Air Cond. S:");
			break;
		}
		/****************************************************************************************************/
		
		SPI_ui8TransmitRecive(u8StatusCode);//demand the status from the slave
     caa:	81 2f       	mov	r24, r17
     cac:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_ui8TransmitRecive>
     cb0:	8f ef       	ldi	r24, 0xFF	; 255
     cb2:	90 e7       	ldi	r25, 0x70	; 112
     cb4:	a2 e0       	ldi	r26, 0x02	; 2
     cb6:	81 50       	subi	r24, 0x01	; 1
     cb8:	90 40       	sbci	r25, 0x00	; 0
     cba:	a0 40       	sbci	r26, 0x00	; 0
     cbc:	e1 f7       	brne	.-8      	; 0xcb6 <vMenuOption+0x14e>
     cbe:	00 c0       	rjmp	.+0      	; 0xcc0 <vMenuOption+0x158>
     cc0:	00 00       	nop
		_delay_ms(100);//Halt the system for the given time in (ms)
		response = SPI_ui8TransmitRecive(DEMAND_RESPONSE);//the master micro controller asks for the status
     cc2:	8f ef       	ldi	r24, 0xFF	; 255
     cc4:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_ui8TransmitRecive>
		if(response == ON_STATUS)//if the response from the slave was on status
     cc8:	81 30       	cpi	r24, 0x01	; 1
     cca:	21 f4       	brne	.+8      	; 0xcd4 <vMenuOption+0x16c>
		{
			LCD_vSend_string("ON");//print the status on
     ccc:	c4 01       	movw	r24, r8
     cce:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <vMenuOption+0x172>
		}
		else//if the response from the slave was off status
		{
			LCD_vSend_string("OFF");//print the status off
     cd4:	c5 01       	movw	r24, r10
     cd6:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
		}

		LCD_movecursor(2,1);//move the cursor to the start of the second line
     cda:	82 e0       	ldi	r24, 0x02	; 2
     cdc:	61 e0       	ldi	r22, 0x01	; 1
     cde:	0e 94 ed 07 	call	0xfda	; 0xfda <LCD_movecursor>
		LCD_vSend_string("1-On 2-Off 0-RET");//print the sub menu
     ce2:	c6 01       	movw	r24, r12
     ce4:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
		
		/*******************************************************************************/
		
		key_pressed = u8GetKeyPressed(u8LoginMode);//wait for the user till key is pressed or the time is out
     ce8:	80 2f       	mov	r24, r16
     cea:	0e 94 93 05 	call	0xb26	; 0xb26 <u8GetKeyPressed>
     cee:	c8 2f       	mov	r28, r24
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	90 e7       	ldi	r25, 0x70	; 112
     cf4:	a2 e0       	ldi	r26, 0x02	; 2
     cf6:	81 50       	subi	r24, 0x01	; 1
     cf8:	90 40       	sbci	r25, 0x00	; 0
     cfa:	a0 40       	sbci	r26, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <vMenuOption+0x18e>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <vMenuOption+0x198>
     d00:	00 00       	nop
		_delay_ms(100);//to avoid the duplication of the pressed key
		
		/*there is no need to take any action in case of the user pressed 0(RET) key
		breaking the loop will be enough since it will be handled in the main*/
		
		if (key_pressed == '1')
     d02:	c1 33       	cpi	r28, 0x31	; 49
     d04:	21 f4       	brne	.+8      	; 0xd0e <vMenuOption+0x1a6>
		{
			SPI_ui8TransmitRecive(u8TurnOnCode);//Send turn on signal from master to slave
     d06:	8f 2d       	mov	r24, r15
     d08:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_ui8TransmitRecive>
     d0c:	20 c0       	rjmp	.+64     	; 0xd4e <vMenuOption+0x1e6>
		}
		else if (key_pressed == '2')
     d0e:	c2 33       	cpi	r28, 0x32	; 50
     d10:	21 f4       	brne	.+8      	; 0xd1a <vMenuOption+0x1b2>
		{
			SPI_ui8TransmitRecive(u8TurnOffCode);//Send turn off signal from master to slave
     d12:	8e 2d       	mov	r24, r14
     d14:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <SPI_ui8TransmitRecive>
     d18:	1a c0       	rjmp	.+52     	; 0xd4e <vMenuOption+0x1e6>
		}
		else if( (key_pressed != NOT_PRESSED) && (key_pressed != '0') )//show wrong input message if the user entered non numeric value
     d1a:	cf 3f       	cpi	r28, 0xFF	; 255
     d1c:	99 f0       	breq	.+38     	; 0xd44 <vMenuOption+0x1dc>
     d1e:	c0 33       	cpi	r28, 0x30	; 48
     d20:	b1 f0       	breq	.+44     	; 0xd4e <vMenuOption+0x1e6>
		{
			LCD_clearscreen();//remove all previously printed characters on the LCD and move the cursor to the first column of the first row
     d22:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <LCD_clearscreen>
			LCD_vSend_string("Wrong input");//print error message
     d26:	c3 01       	movw	r24, r6
     d28:	0e 94 da 07 	call	0xfb4	; 0xfb4 <LCD_vSend_string>
     d2c:	8f ef       	ldi	r24, 0xFF	; 255
     d2e:	94 e3       	ldi	r25, 0x34	; 52
     d30:	ac e0       	ldi	r26, 0x0C	; 12
     d32:	81 50       	subi	r24, 0x01	; 1
     d34:	90 40       	sbci	r25, 0x00	; 0
     d36:	a0 40       	sbci	r26, 0x00	; 0
     d38:	e1 f7       	brne	.-8      	; 0xd32 <vMenuOption+0x1ca>
     d3a:	00 c0       	rjmp	.+0      	; 0xd3c <vMenuOption+0x1d4>
     d3c:	00 00       	nop
			_delay_ms(500);//Halt the system for the given time in (ms)
		}
	} while ( ( (key_pressed < '0') || (key_pressed > '2') ) && (timeout_flag == FALSE));//break the loop in case of valid key or time is out
     d3e:	c0 53       	subi	r28, 0x30	; 48
     d40:	c3 30       	cpi	r28, 0x03	; 3
     d42:	28 f0       	brcs	.+10     	; 0xd4e <vMenuOption+0x1e6>
     d44:	80 91 96 02 	lds	r24, 0x0296
     d48:	88 23       	and	r24, r24
     d4a:	09 f4       	brne	.+2      	; 0xd4e <vMenuOption+0x1e6>
     d4c:	47 cf       	rjmp	.-370    	; 0xbdc <vMenuOption+0x74>
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	1f 91       	pop	r17
     d54:	0f 91       	pop	r16
     d56:	ff 90       	pop	r15
     d58:	ef 90       	pop	r14
     d5a:	df 90       	pop	r13
     d5c:	cf 90       	pop	r12
     d5e:	bf 90       	pop	r11
     d60:	af 90       	pop	r10
     d62:	9f 90       	pop	r9
     d64:	8f 90       	pop	r8
     d66:	7f 90       	pop	r7
     d68:	6f 90       	pop	r6
     d6a:	5f 90       	pop	r5
     d6c:	4f 90       	pop	r4
     d6e:	3f 90       	pop	r3
     d70:	08 95       	ret

00000d72 <keypad_vInit>:
*/
#include "keypad_driver.h"
void keypad_vInit(void)
{
	/* Initialize first four bits in keypad as output pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
     d72:	84 e4       	ldi	r24, 0x44	; 68
     d74:	60 e0       	ldi	r22, 0x00	; 0
     d76:	41 e0       	ldi	r20, 0x01	; 1
     d78:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
     d7c:	84 e4       	ldi	r24, 0x44	; 68
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	41 e0       	ldi	r20, 0x01	; 1
     d82:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
     d86:	84 e4       	ldi	r24, 0x44	; 68
     d88:	62 e0       	ldi	r22, 0x02	; 2
     d8a:	41 e0       	ldi	r20, 0x01	; 1
     d8c:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
     d90:	84 e4       	ldi	r24, 0x44	; 68
     d92:	63 e0       	ldi	r22, 0x03	; 3
     d94:	41 e0       	ldi	r20, 0x01	; 1
     d96:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	/******************************************************/
	/* initalize second four bits in keypad as input pins */
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_FIFTH_PIN,0);
     d9a:	84 e4       	ldi	r24, 0x44	; 68
     d9c:	64 e0       	ldi	r22, 0x04	; 4
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SIXTH_PIN,0);
     da4:	84 e4       	ldi	r24, 0x44	; 68
     da6:	65 e0       	ldi	r22, 0x05	; 5
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,0);
     dae:	84 e4       	ldi	r24, 0x44	; 68
     db0:	66 e0       	ldi	r22, 0x06	; 6
     db2:	40 e0       	ldi	r20, 0x00	; 0
     db4:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,0);
     db8:	84 e4       	ldi	r24, 0x44	; 68
     dba:	67 e0       	ldi	r22, 0x07	; 7
     dbc:	40 e0       	ldi	r20, 0x00	; 0
     dbe:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	/*****************************************************/
	/*connect pull up resistance to the input pins*/
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_FIFTH_PIN,1);
     dc2:	84 e4       	ldi	r24, 0x44	; 68
     dc4:	64 e0       	ldi	r22, 0x04	; 4
     dc6:	41 e0       	ldi	r20, 0x01	; 1
     dc8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SIXTH_PIN,1);
     dcc:	84 e4       	ldi	r24, 0x44	; 68
     dce:	65 e0       	ldi	r22, 0x05	; 5
     dd0:	41 e0       	ldi	r20, 0x01	; 1
     dd2:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_SEVENTH_PIN,1);
     dd6:	84 e4       	ldi	r24, 0x44	; 68
     dd8:	66 e0       	ldi	r22, 0x06	; 6
     dda:	41 e0       	ldi	r20, 0x01	; 1
     ddc:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_vconnectpullup>
	DIO_vconnectpullup(KEYPAD_PORT,KEYPAD_EIGHTH_PIN,1);
     de0:	84 e4       	ldi	r24, 0x44	; 68
     de2:	67 e0       	ldi	r22, 0x07	; 7
     de4:	41 e0       	ldi	r20, 0x01	; 1
     de6:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <DIO_vconnectpullup>
	/****************************************************/
}
     dea:	08 95       	ret

00000dec <keypad_u8check_press>:
uint8 keypad_u8check_press(void)
{
     dec:	ef 92       	push	r14
     dee:	ff 92       	push	r15
     df0:	0f 93       	push	r16
     df2:	1f 93       	push	r17
     df4:	cf 93       	push	r28
     df6:	df 93       	push	r29
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	60 97       	sbiw	r28, 0x10	; 16
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
	uint8 arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}}; //keypad buttons
     e08:	de 01       	movw	r26, r28
     e0a:	11 96       	adiw	r26, 0x01	; 1
     e0c:	e5 e8       	ldi	r30, 0x85	; 133
     e0e:	f2 e0       	ldi	r31, 0x02	; 2
     e10:	80 e1       	ldi	r24, 0x10	; 16
     e12:	01 90       	ld	r0, Z+
     e14:	0d 92       	st	X+, r0
     e16:	81 50       	subi	r24, 0x01	; 1
     e18:	e1 f7       	brne	.-8      	; 0xe12 <keypad_u8check_press+0x26>
     e1a:	ee 24       	eor	r14, r14
     e1c:	ff 24       	eor	r15, r15
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
     e1e:	0f ef       	ldi	r16, 0xFF	; 255
	for(row=0;row<4;row++)
	{
		/*stop the work of keypad firstly*/
		DIO_write(KEYPAD_PORT,KEYPAD_FIRST_PIN,1);
     e20:	84 e4       	ldi	r24, 0x44	; 68
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	41 e0       	ldi	r20, 0x01	; 1
     e26:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_SECOND_PIN,1);
     e2a:	84 e4       	ldi	r24, 0x44	; 68
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	41 e0       	ldi	r20, 0x01	; 1
     e30:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_THIRD_PIN,1);
     e34:	84 e4       	ldi	r24, 0x44	; 68
     e36:	62 e0       	ldi	r22, 0x02	; 2
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
     e3e:	84 e4       	ldi	r24, 0x44	; 68
     e40:	63 e0       	ldi	r22, 0x03	; 3
     e42:	41 e0       	ldi	r20, 0x01	; 1
     e44:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
     e48:	8f e3       	ldi	r24, 0x3F	; 63
     e4a:	9c e9       	ldi	r25, 0x9C	; 156
     e4c:	01 97       	sbiw	r24, 0x01	; 1
     e4e:	f1 f7       	brne	.-4      	; 0xe4c <keypad_u8check_press+0x60>
     e50:	00 c0       	rjmp	.+0      	; 0xe52 <keypad_u8check_press+0x66>
     e52:	00 00       	nop
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
     e54:	84 e4       	ldi	r24, 0x44	; 68
     e56:	6e 2d       	mov	r22, r14
     e58:	40 e0       	ldi	r20, 0x00	; 0
     e5a:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
		
		for(coloumn=0;coloumn<4;coloumn++)
     e5e:	10 e0       	ldi	r17, 0x00	; 0
		{
			key_pressed_indicator=DIO_u8read(KEYPAD_PORT,(coloumn+4)); // read the input pins of MC which connected to keypad
     e60:	61 2f       	mov	r22, r17
     e62:	6c 5f       	subi	r22, 0xFC	; 252
     e64:	84 e4       	ldi	r24, 0x44	; 68
     e66:	0e 94 13 09 	call	0x1226	; 0x1226 <DIO_u8read>
			if(key_pressed_indicator==0)// will be 0 only if any key pressed
     e6a:	88 23       	and	r24, r24
     e6c:	79 f4       	brne	.+30     	; 0xe8c <keypad_u8check_press+0xa0>
			{
				returnval=arr[row][coloumn]; //put the selected pressed key to the retrurnval
     e6e:	f7 01       	movw	r30, r14
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	e1 0f       	add	r30, r17
     e7a:	f1 1d       	adc	r31, r1
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	8c 0f       	add	r24, r28
     e82:	9d 1f       	adc	r25, r29
     e84:	e8 0f       	add	r30, r24
     e86:	f9 1f       	adc	r31, r25
     e88:	00 81       	ld	r16, Z
				break; // break from the loop
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <keypad_u8check_press+0xa6>
		DIO_write(KEYPAD_PORT,KEYPAD_FOURTH_PIN,1);
		/*************************************/
		_delay_ms(20); 
		DIO_write(KEYPAD_PORT,row,0);//write 0 to the first pin in keypad (output pin from MC)
		
		for(coloumn=0;coloumn<4;coloumn++)
     e8c:	1f 5f       	subi	r17, 0xFF	; 255
     e8e:	14 30       	cpi	r17, 0x04	; 4
     e90:	39 f7       	brne	.-50     	; 0xe60 <keypad_u8check_press+0x74>
     e92:	08 94       	sec
     e94:	e1 1c       	adc	r14, r1
     e96:	f1 1c       	adc	r15, r1
	uint8 row; //which indicate the given output  pin
	uint8 coloumn; //which indicate the given input pin
	uint8 key_pressed_indicator; //the variable  which contain the key pressed
	
	uint8 returnval=NOT_PRESSED; //the variable contain the value which will be returned which will be key pressed or not pressed in case of no key pressed
	for(row=0;row<4;row++)
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	e9 16       	cp	r14, r25
     e9c:	f1 04       	cpc	r15, r1
     e9e:	09 f0       	breq	.+2      	; 0xea2 <keypad_u8check_press+0xb6>
     ea0:	bf cf       	rjmp	.-130    	; 0xe20 <keypad_u8check_press+0x34>
				break; // break from the loop
			}
		}
	}
	return returnval ; //return the pressed key in case of key pressed or return 0xff in case of no key pressed
     ea2:	80 2f       	mov	r24, r16
     ea4:	60 96       	adiw	r28, 0x10	; 16
     ea6:	0f b6       	in	r0, 0x3f	; 63
     ea8:	f8 94       	cli
     eaa:	de bf       	out	0x3e, r29	; 62
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	cd bf       	out	0x3d, r28	; 61
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	1f 91       	pop	r17
     eb6:	0f 91       	pop	r16
     eb8:	ff 90       	pop	r15
     eba:	ef 90       	pop	r14
     ebc:	08 95       	ret

00000ebe <send_falling_edge>:


static void send_falling_edge(void)
{
	/* to enable printing the sent character to LCD ,we should send send falling edge to the lcd*/ 
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,1); // set enable pin to one
     ebe:	82 e4       	ldi	r24, 0x42	; 66
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	41 e0       	ldi	r20, 0x01	; 1
     ec4:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
     ec8:	8f e9       	ldi	r24, 0x9F	; 159
     eca:	9f e0       	ldi	r25, 0x0F	; 15
     ecc:	01 97       	sbiw	r24, 0x01	; 1
     ece:	f1 f7       	brne	.-4      	; 0xecc <send_falling_edge+0xe>
     ed0:	00 c0       	rjmp	.+0      	; 0xed2 <send_falling_edge+0x14>
     ed2:	00 00       	nop
	_delay_ms(2); //period of high
	DIO_write(LCD_CONTROL_PORT,LCD_EN_PIN,0); // clear enable pin 
     ed4:	82 e4       	ldi	r24, 0x42	; 66
     ed6:	60 e0       	ldi	r22, 0x00	; 0
     ed8:	40 e0       	ldi	r20, 0x00	; 0
     eda:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
     ede:	8f e9       	ldi	r24, 0x9F	; 159
     ee0:	9f e0       	ldi	r25, 0x0F	; 15
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	f1 f7       	brne	.-4      	; 0xee2 <send_falling_edge+0x24>
     ee6:	00 c0       	rjmp	.+0      	; 0xee8 <send_falling_edge+0x2a>
     ee8:	00 00       	nop
	_delay_ms(2); // period of low
}
     eea:	08 95       	ret

00000eec <LCD_vSend_cmd>:
void LCD_vSend_cmd(uint8 cmd)
{
     eec:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,cmd); //send the command to LCD
     eee:	81 e4       	ldi	r24, 0x41	; 65
     ef0:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command 
     ef4:	82 e4       	ldi	r24, 0x42	; 66
     ef6:	61 e0       	ldi	r22, 0x01	; 1
     ef8:	40 e0       	ldi	r20, 0x00	; 0
     efa:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
	send_falling_edge(); //send falling edge
     efe:	0e 94 5f 07 	call	0xebe	; 0xebe <send_falling_edge>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,0); //enable LCD to receive command
	send_falling_edge(); //send falling edge
	/***************************************/
	#endif
	
}
     f02:	08 95       	ret

00000f04 <LCD_vInit>:

void LCD_vInit(void)
{
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	/* set LCD pins as output pins in case of 8 bit LCD*/
	DIO_vsetPINDir(LCD_PORT,LCD_FIRST_PIN,1);
     f04:	81 e4       	ldi	r24, 0x41	; 65
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SECOND_PIN,1);
     f0e:	81 e4       	ldi	r24, 0x41	; 65
     f10:	61 e0       	ldi	r22, 0x01	; 1
     f12:	41 e0       	ldi	r20, 0x01	; 1
     f14:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_THIRD_PIN,1);
     f18:	81 e4       	ldi	r24, 0x41	; 65
     f1a:	62 e0       	ldi	r22, 0x02	; 2
     f1c:	41 e0       	ldi	r20, 0x01	; 1
     f1e:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FOURTH_PIN,1);
     f22:	81 e4       	ldi	r24, 0x41	; 65
     f24:	63 e0       	ldi	r22, 0x03	; 3
     f26:	41 e0       	ldi	r20, 0x01	; 1
     f28:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_FIFTH_PIN,1);
     f2c:	81 e4       	ldi	r24, 0x41	; 65
     f2e:	64 e0       	ldi	r22, 0x04	; 4
     f30:	41 e0       	ldi	r20, 0x01	; 1
     f32:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SIXTH_PIN,1);
     f36:	81 e4       	ldi	r24, 0x41	; 65
     f38:	65 e0       	ldi	r22, 0x05	; 5
     f3a:	41 e0       	ldi	r20, 0x01	; 1
     f3c:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_SEVENTH_PIN,1);
     f40:	81 e4       	ldi	r24, 0x41	; 65
     f42:	66 e0       	ldi	r22, 0x06	; 6
     f44:	41 e0       	ldi	r20, 0x01	; 1
     f46:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_PORT,LCD_EIGHTH_PIN,1);
     f4a:	81 e4       	ldi	r24, 0x41	; 65
     f4c:	67 e0       	ldi	r22, 0x07	; 7
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	/*****************************/
	/* set LCD control pins as output pins in case of 8 bit LCD */
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_EN_PIN,1);
     f54:	82 e4       	ldi	r24, 0x42	; 66
     f56:	60 e0       	ldi	r22, 0x00	; 0
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RW_PIN,1);
     f5e:	82 e4       	ldi	r24, 0x42	; 66
     f60:	62 e0       	ldi	r22, 0x02	; 2
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	DIO_vsetPINDir(LCD_CONTROL_PORT,LCD_RS_PIN,1);
     f68:	82 e4       	ldi	r24, 0x42	; 66
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
	/*****************************/
	DIO_write(LCD_CONTROL_PORT,LCD_RW_PIN,0); // enable write to LCD 
     f72:	82 e4       	ldi	r24, 0x42	; 66
     f74:	62 e0       	ldi	r22, 0x02	; 2
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
	LCD_vSend_cmd(EIGHT_BIT_MODE); //enable 8 bit LCD Mode 
     f7c:	88 e3       	ldi	r24, 0x38	; 56
     f7e:	0e 94 76 07 	call	0xeec	; 0xeec <LCD_vSend_cmd>
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	0e 94 76 07 	call	0xeec	; 0xeec <LCD_vSend_cmd>
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
     f88:	8e e0       	ldi	r24, 0x0E	; 14
     f8a:	0e 94 76 07 	call	0xeec	; 0xeec <LCD_vSend_cmd>
     f8e:	8f e1       	ldi	r24, 0x1F	; 31
     f90:	9e e4       	ldi	r25, 0x4E	; 78
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <LCD_vInit+0x8e>
     f96:	00 c0       	rjmp	.+0      	; 0xf98 <LCD_vInit+0x94>
     f98:	00 00       	nop
	LCD_vSend_cmd(FOUR_BIT_MODE_II); //enable 4 bit LCD Mode 
	LCD_vSend_cmd(CLR_SCREEN); // CLR LCD screen 
	LCD_vSend_cmd(DISPLAY_ON_CURSOR_ON); // enable cursor and display on 
	_delay_ms(10); //small delay to ensure LCD finish the initialization
	#endif
} // end of LCD initialization
     f9a:	08 95       	ret

00000f9c <LCD_vSend_char>:
	/***************************************/
	#endif
	
}
void LCD_vSend_char(uint8 data)
{
     f9c:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode //depend on pre-defined configurations which exist in lcd_config.h
	DIO_write_port(LCD_PORT,data); //send the data to LCD
     f9e:	81 e4       	ldi	r24, 0x41	; 65
     fa0:	0e 94 ab 09 	call	0x1356	; 0x1356 <DIO_write_port>
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
     fa4:	82 e4       	ldi	r24, 0x42	; 66
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
	send_falling_edge(); //send falling edge
     fae:	0e 94 5f 07 	call	0xebe	; 0xebe <send_falling_edge>
	dio_write_highnibble(LCD_PORT,data<<4);
	DIO_write(LCD_CONTROL_PORT,LCD_RS_PIN,1); //enable LCD to receive data
	send_falling_edge(); //send falling edge
	/******************************************/
	#endif
}
     fb2:	08 95       	ret

00000fb4 <LCD_vSend_string>:

void LCD_vSend_string(char *data)
{
     fb4:	cf 93       	push	r28
     fb6:	df 93       	push	r29
     fb8:	ec 01       	movw	r28, r24
	while((*data)!=0) //keep in the loop until the end of the string 
     fba:	88 81       	ld	r24, Y
     fbc:	88 23       	and	r24, r24
     fbe:	31 f0       	breq	.+12     	; 0xfcc <LCD_vSend_string+0x18>
	send_falling_edge(); //send falling edge
	/******************************************/
	#endif
}

void LCD_vSend_string(char *data)
     fc0:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!=0) //keep in the loop until the end of the string 
	{
		LCD_vSend_char(*data); // print the characters of the string 
     fc2:	0e 94 ce 07 	call	0xf9c	; 0xf9c <LCD_vSend_char>
	#endif
}

void LCD_vSend_string(char *data)
{
	while((*data)!=0) //keep in the loop until the end of the string 
     fc6:	89 91       	ld	r24, Y+
     fc8:	88 23       	and	r24, r24
     fca:	d9 f7       	brne	.-10     	; 0xfc2 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data); // print the characters of the string 
		data++; // make the pointer points to the next character
	}
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <LCD_clearscreen>:

void LCD_clearscreen(void)
{
	LCD_vSend_cmd(CLR_SCREEN); // clear the screen
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	0e 94 76 07 	call	0xeec	; 0xeec <LCD_vSend_cmd>
}
     fd8:	08 95       	ret

00000fda <LCD_movecursor>:
	{
		data=0x80;
	}
	/********************************************/
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
     fda:	81 30       	cpi	r24, 0x01	; 1
     fdc:	19 f4       	brne	.+6      	; 0xfe4 <LCD_movecursor+0xa>
	{
		data=0x80+coloumn-1 ;
     fde:	86 2f       	mov	r24, r22
     fe0:	81 58       	subi	r24, 0x81	; 129
     fe2:	06 c0       	rjmp	.+12     	; 0xff0 <LCD_movecursor+0x16>
	}
	else if (row==2)
     fe4:	82 30       	cpi	r24, 0x02	; 2
     fe6:	19 f4       	brne	.+6      	; 0xfee <LCD_movecursor+0x14>
	{
		data=0xc0+coloumn-1;
     fe8:	86 2f       	mov	r24, r22
     fea:	81 54       	subi	r24, 0x41	; 65
     fec:	01 c0       	rjmp	.+2      	; 0xff0 <LCD_movecursor+0x16>
	/*set the postion of cursor depend on the selected row and coloumn*/
	if(row==1)
	{
		data=0x80+coloumn-1 ;
	}
	else if (row==2)
     fee:	80 e8       	ldi	r24, 0x80	; 128
	{
		data=0xc0+coloumn-1;
	}
	/**************************************/
	
	LCD_vSend_cmd(data); //set the position  of the cursor
     ff0:	0e 94 76 07 	call	0xeec	; 0xeec <LCD_vSend_cmd>
     ff4:	08 95       	ret

00000ff6 <LED_vInit>:
* Qabbani
*/
#include "LED.h"
void LED_vInit(uint8 portname,uint8 pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     ff6:	41 e0       	ldi	r20, 0x01	; 1
     ff8:	0e 94 0d 08 	call	0x101a	; 0x101a <DIO_vsetPINDir>
}
     ffc:	08 95       	ret

00000ffe <LED_vTurnOn>:
void LED_vTurnOn(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
}
    1004:	08 95       	ret

00001006 <LED_vTurnOff>:
void LED_vTurnOff(uint8 portname,uint8 pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
    1006:	40 e0       	ldi	r20, 0x00	; 0
    1008:	0e 94 90 08 	call	0x1120	; 0x1120 <DIO_write>
}
    100c:	08 95       	ret

0000100e <LED_vToggle>:
void LED_vToggle(uint8 portname,uint8 pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
    100e:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <DIO_toggle>
}
    1012:	08 95       	ret

00001014 <LED_u8ReadStatus>:
uint8 LED_u8ReadStatus(uint8 portname,uint8 pinnumber)
{
	return DIO_u8read(portname,pinnumber);//return the current status of the given pin
    1014:	0e 94 13 09 	call	0x1226	; 0x1226 <DIO_u8read>
}
    1018:	08 95       	ret

0000101a <DIO_vsetPINDir>:
#include <avr/io.h>
#include "../../SERVICES/std_macros.h"
#include "DIO.h"
void DIO_vsetPINDir(uint8 portname,uint8 pinnumber,uint8 direction)
{
	switch(portname)
    101a:	82 34       	cpi	r24, 0x42	; 66
    101c:	51 f1       	breq	.+84     	; 0x1072 <DIO_vsetPINDir+0x58>
    101e:	83 34       	cpi	r24, 0x43	; 67
    1020:	20 f4       	brcc	.+8      	; 0x102a <DIO_vsetPINDir+0x10>
    1022:	81 34       	cpi	r24, 0x41	; 65
    1024:	09 f0       	breq	.+2      	; 0x1028 <DIO_vsetPINDir+0xe>
    1026:	7b c0       	rjmp	.+246    	; 0x111e <DIO_vsetPINDir+0x104>
    1028:	07 c0       	rjmp	.+14     	; 0x1038 <DIO_vsetPINDir+0x1e>
    102a:	83 34       	cpi	r24, 0x43	; 67
    102c:	09 f4       	brne	.+2      	; 0x1030 <DIO_vsetPINDir+0x16>
    102e:	3e c0       	rjmp	.+124    	; 0x10ac <DIO_vsetPINDir+0x92>
    1030:	84 34       	cpi	r24, 0x44	; 68
    1032:	09 f0       	breq	.+2      	; 0x1036 <DIO_vsetPINDir+0x1c>
    1034:	74 c0       	rjmp	.+232    	; 0x111e <DIO_vsetPINDir+0x104>
    1036:	57 c0       	rjmp	.+174    	; 0x10e6 <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
    1038:	41 30       	cpi	r20, 0x01	; 1
    103a:	69 f4       	brne	.+26     	; 0x1056 <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
    103c:	2a b3       	in	r18, 0x1a	; 26
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	ac 01       	movw	r20, r24
    1044:	02 c0       	rjmp	.+4      	; 0x104a <DIO_vsetPINDir+0x30>
    1046:	44 0f       	add	r20, r20
    1048:	55 1f       	adc	r21, r21
    104a:	6a 95       	dec	r22
    104c:	e2 f7       	brpl	.-8      	; 0x1046 <DIO_vsetPINDir+0x2c>
    104e:	ba 01       	movw	r22, r20
    1050:	62 2b       	or	r22, r18
    1052:	6a bb       	out	0x1a, r22	; 26
    1054:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
    1056:	2a b3       	in	r18, 0x1a	; 26
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	ac 01       	movw	r20, r24
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_vsetPINDir+0x4a>
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	6a 95       	dec	r22
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_vsetPINDir+0x46>
    1068:	ba 01       	movw	r22, r20
    106a:	60 95       	com	r22
    106c:	62 23       	and	r22, r18
    106e:	6a bb       	out	0x1a, r22	; 26
    1070:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
    1072:	41 30       	cpi	r20, 0x01	; 1
    1074:	69 f4       	brne	.+26     	; 0x1090 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
    1076:	27 b3       	in	r18, 0x17	; 23
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	ac 01       	movw	r20, r24
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <DIO_vsetPINDir+0x6a>
    1080:	44 0f       	add	r20, r20
    1082:	55 1f       	adc	r21, r21
    1084:	6a 95       	dec	r22
    1086:	e2 f7       	brpl	.-8      	; 0x1080 <DIO_vsetPINDir+0x66>
    1088:	ba 01       	movw	r22, r20
    108a:	62 2b       	or	r22, r18
    108c:	67 bb       	out	0x17, r22	; 23
    108e:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
    1090:	27 b3       	in	r18, 0x17	; 23
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	ac 01       	movw	r20, r24
    1098:	02 c0       	rjmp	.+4      	; 0x109e <DIO_vsetPINDir+0x84>
    109a:	44 0f       	add	r20, r20
    109c:	55 1f       	adc	r21, r21
    109e:	6a 95       	dec	r22
    10a0:	e2 f7       	brpl	.-8      	; 0x109a <DIO_vsetPINDir+0x80>
    10a2:	ba 01       	movw	r22, r20
    10a4:	60 95       	com	r22
    10a6:	62 23       	and	r22, r18
    10a8:	67 bb       	out	0x17, r22	; 23
    10aa:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
    10ac:	41 30       	cpi	r20, 0x01	; 1
    10ae:	69 f4       	brne	.+26     	; 0x10ca <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
    10b0:	24 b3       	in	r18, 0x14	; 20
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	ac 01       	movw	r20, r24
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <DIO_vsetPINDir+0xa4>
    10ba:	44 0f       	add	r20, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	6a 95       	dec	r22
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <DIO_vsetPINDir+0xa0>
    10c2:	ba 01       	movw	r22, r20
    10c4:	62 2b       	or	r22, r18
    10c6:	64 bb       	out	0x14, r22	; 20
    10c8:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
    10ca:	24 b3       	in	r18, 0x14	; 20
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	ac 01       	movw	r20, r24
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_vsetPINDir+0xbe>
    10d4:	44 0f       	add	r20, r20
    10d6:	55 1f       	adc	r21, r21
    10d8:	6a 95       	dec	r22
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_vsetPINDir+0xba>
    10dc:	ba 01       	movw	r22, r20
    10de:	60 95       	com	r22
    10e0:	62 23       	and	r22, r18
    10e2:	64 bb       	out	0x14, r22	; 20
    10e4:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
    10e6:	41 30       	cpi	r20, 0x01	; 1
    10e8:	69 f4       	brne	.+26     	; 0x1104 <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
    10ea:	21 b3       	in	r18, 0x11	; 17
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	ac 01       	movw	r20, r24
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <DIO_vsetPINDir+0xde>
    10f4:	44 0f       	add	r20, r20
    10f6:	55 1f       	adc	r21, r21
    10f8:	6a 95       	dec	r22
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <DIO_vsetPINDir+0xda>
    10fc:	ba 01       	movw	r22, r20
    10fe:	62 2b       	or	r22, r18
    1100:	61 bb       	out	0x11, r22	; 17
    1102:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
    1104:	21 b3       	in	r18, 0x11	; 17
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	ac 01       	movw	r20, r24
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <DIO_vsetPINDir+0xf8>
    110e:	44 0f       	add	r20, r20
    1110:	55 1f       	adc	r21, r21
    1112:	6a 95       	dec	r22
    1114:	e2 f7       	brpl	.-8      	; 0x110e <DIO_vsetPINDir+0xf4>
    1116:	ba 01       	movw	r22, r20
    1118:	60 95       	com	r22
    111a:	62 23       	and	r22, r18
    111c:	61 bb       	out	0x11, r22	; 17
    111e:	08 95       	ret

00001120 <DIO_write>:
}


void DIO_write(uint8 portname,uint8 pinnumber,uint8 outputvalue)
{
	switch(portname)
    1120:	82 34       	cpi	r24, 0x42	; 66
    1122:	51 f1       	breq	.+84     	; 0x1178 <DIO_write+0x58>
    1124:	83 34       	cpi	r24, 0x43	; 67
    1126:	20 f4       	brcc	.+8      	; 0x1130 <DIO_write+0x10>
    1128:	81 34       	cpi	r24, 0x41	; 65
    112a:	09 f0       	breq	.+2      	; 0x112e <DIO_write+0xe>
    112c:	7b c0       	rjmp	.+246    	; 0x1224 <DIO_write+0x104>
    112e:	07 c0       	rjmp	.+14     	; 0x113e <DIO_write+0x1e>
    1130:	83 34       	cpi	r24, 0x43	; 67
    1132:	09 f4       	brne	.+2      	; 0x1136 <DIO_write+0x16>
    1134:	3e c0       	rjmp	.+124    	; 0x11b2 <DIO_write+0x92>
    1136:	84 34       	cpi	r24, 0x44	; 68
    1138:	09 f0       	breq	.+2      	; 0x113c <DIO_write+0x1c>
    113a:	74 c0       	rjmp	.+232    	; 0x1224 <DIO_write+0x104>
    113c:	57 c0       	rjmp	.+174    	; 0x11ec <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
    113e:	41 30       	cpi	r20, 0x01	; 1
    1140:	69 f4       	brne	.+26     	; 0x115c <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
    1142:	2b b3       	in	r18, 0x1b	; 27
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	ac 01       	movw	r20, r24
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <DIO_write+0x30>
    114c:	44 0f       	add	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	6a 95       	dec	r22
    1152:	e2 f7       	brpl	.-8      	; 0x114c <DIO_write+0x2c>
    1154:	ba 01       	movw	r22, r20
    1156:	62 2b       	or	r22, r18
    1158:	6b bb       	out	0x1b, r22	; 27
    115a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
    115c:	2b b3       	in	r18, 0x1b	; 27
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	ac 01       	movw	r20, r24
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_write+0x4a>
    1166:	44 0f       	add	r20, r20
    1168:	55 1f       	adc	r21, r21
    116a:	6a 95       	dec	r22
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_write+0x46>
    116e:	ba 01       	movw	r22, r20
    1170:	60 95       	com	r22
    1172:	62 23       	and	r22, r18
    1174:	6b bb       	out	0x1b, r22	; 27
    1176:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
    1178:	41 30       	cpi	r20, 0x01	; 1
    117a:	69 f4       	brne	.+26     	; 0x1196 <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
    117c:	28 b3       	in	r18, 0x18	; 24
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	ac 01       	movw	r20, r24
    1184:	02 c0       	rjmp	.+4      	; 0x118a <DIO_write+0x6a>
    1186:	44 0f       	add	r20, r20
    1188:	55 1f       	adc	r21, r21
    118a:	6a 95       	dec	r22
    118c:	e2 f7       	brpl	.-8      	; 0x1186 <DIO_write+0x66>
    118e:	ba 01       	movw	r22, r20
    1190:	62 2b       	or	r22, r18
    1192:	68 bb       	out	0x18, r22	; 24
    1194:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
    1196:	28 b3       	in	r18, 0x18	; 24
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	ac 01       	movw	r20, r24
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <DIO_write+0x84>
    11a0:	44 0f       	add	r20, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	6a 95       	dec	r22
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <DIO_write+0x80>
    11a8:	ba 01       	movw	r22, r20
    11aa:	60 95       	com	r22
    11ac:	62 23       	and	r22, r18
    11ae:	68 bb       	out	0x18, r22	; 24
    11b0:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
    11b2:	41 30       	cpi	r20, 0x01	; 1
    11b4:	69 f4       	brne	.+26     	; 0x11d0 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
    11b6:	25 b3       	in	r18, 0x15	; 21
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	ac 01       	movw	r20, r24
    11be:	02 c0       	rjmp	.+4      	; 0x11c4 <DIO_write+0xa4>
    11c0:	44 0f       	add	r20, r20
    11c2:	55 1f       	adc	r21, r21
    11c4:	6a 95       	dec	r22
    11c6:	e2 f7       	brpl	.-8      	; 0x11c0 <DIO_write+0xa0>
    11c8:	ba 01       	movw	r22, r20
    11ca:	62 2b       	or	r22, r18
    11cc:	65 bb       	out	0x15, r22	; 21
    11ce:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
    11d0:	25 b3       	in	r18, 0x15	; 21
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	ac 01       	movw	r20, r24
    11d8:	02 c0       	rjmp	.+4      	; 0x11de <DIO_write+0xbe>
    11da:	44 0f       	add	r20, r20
    11dc:	55 1f       	adc	r21, r21
    11de:	6a 95       	dec	r22
    11e0:	e2 f7       	brpl	.-8      	; 0x11da <DIO_write+0xba>
    11e2:	ba 01       	movw	r22, r20
    11e4:	60 95       	com	r22
    11e6:	62 23       	and	r22, r18
    11e8:	65 bb       	out	0x15, r22	; 21
    11ea:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
    11ec:	41 30       	cpi	r20, 0x01	; 1
    11ee:	69 f4       	brne	.+26     	; 0x120a <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
    11f0:	22 b3       	in	r18, 0x12	; 18
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	ac 01       	movw	r20, r24
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <DIO_write+0xde>
    11fa:	44 0f       	add	r20, r20
    11fc:	55 1f       	adc	r21, r21
    11fe:	6a 95       	dec	r22
    1200:	e2 f7       	brpl	.-8      	; 0x11fa <DIO_write+0xda>
    1202:	ba 01       	movw	r22, r20
    1204:	62 2b       	or	r22, r18
    1206:	62 bb       	out	0x12, r22	; 18
    1208:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
    120a:	22 b3       	in	r18, 0x12	; 18
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	ac 01       	movw	r20, r24
    1212:	02 c0       	rjmp	.+4      	; 0x1218 <DIO_write+0xf8>
    1214:	44 0f       	add	r20, r20
    1216:	55 1f       	adc	r21, r21
    1218:	6a 95       	dec	r22
    121a:	e2 f7       	brpl	.-8      	; 0x1214 <DIO_write+0xf4>
    121c:	ba 01       	movw	r22, r20
    121e:	60 95       	com	r22
    1220:	62 23       	and	r22, r18
    1222:	62 bb       	out	0x12, r22	; 18
    1224:	08 95       	ret

00001226 <DIO_u8read>:


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
	switch(portname)
    1226:	82 34       	cpi	r24, 0x42	; 66
    1228:	f1 f0       	breq	.+60     	; 0x1266 <DIO_u8read+0x40>
    122a:	83 34       	cpi	r24, 0x43	; 67
    122c:	20 f4       	brcc	.+8      	; 0x1236 <DIO_u8read+0x10>
    122e:	81 34       	cpi	r24, 0x41	; 65
    1230:	09 f0       	breq	.+2      	; 0x1234 <DIO_u8read+0xe>
    1232:	4f c0       	rjmp	.+158    	; 0x12d2 <DIO_u8read+0xac>
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <DIO_u8read+0x1c>
    1236:	83 34       	cpi	r24, 0x43	; 67
    1238:	41 f1       	breq	.+80     	; 0x128a <DIO_u8read+0x64>
    123a:	84 34       	cpi	r24, 0x44	; 68
    123c:	09 f0       	breq	.+2      	; 0x1240 <DIO_u8read+0x1a>
    123e:	49 c0       	rjmp	.+146    	; 0x12d2 <DIO_u8read+0xac>
    1240:	36 c0       	rjmp	.+108    	; 0x12ae <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=Read_bIT(PINA,pinnumber);//Read the value from the given pin in port A
    1242:	29 b3       	in	r18, 0x19	; 25
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	06 2e       	mov	r0, r22
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_u8read+0x2a>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_u8read+0x26>
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	82 23       	and	r24, r18
    1258:	93 23       	and	r25, r19
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8read+0x3a>
    125c:	95 95       	asr	r25
    125e:	87 95       	ror	r24
    1260:	6a 95       	dec	r22
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8read+0x36>
		break;
    1264:	08 95       	ret
		
		case 'B' :
		return_value=Read_bIT(PINB,pinnumber);//Read the value from the given pin in port B
    1266:	26 b3       	in	r18, 0x16	; 22
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	06 2e       	mov	r0, r22
    126e:	02 c0       	rjmp	.+4      	; 0x1274 <DIO_u8read+0x4e>
    1270:	88 0f       	add	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	0a 94       	dec	r0
    1276:	e2 f7       	brpl	.-8      	; 0x1270 <DIO_u8read+0x4a>
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	82 23       	and	r24, r18
    127c:	93 23       	and	r25, r19
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <DIO_u8read+0x5e>
    1280:	95 95       	asr	r25
    1282:	87 95       	ror	r24
    1284:	6a 95       	dec	r22
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <DIO_u8read+0x5a>
		break;
    1288:	08 95       	ret
		
		case 'C' :
		return_value=Read_bIT(PINC,pinnumber);//Read the value from the given pin in port C
    128a:	23 b3       	in	r18, 0x13	; 19
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	06 2e       	mov	r0, r22
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8read+0x72>
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	0a 94       	dec	r0
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8read+0x6e>
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	82 23       	and	r24, r18
    12a0:	93 23       	and	r25, r19
    12a2:	02 c0       	rjmp	.+4      	; 0x12a8 <DIO_u8read+0x82>
    12a4:	95 95       	asr	r25
    12a6:	87 95       	ror	r24
    12a8:	6a 95       	dec	r22
    12aa:	e2 f7       	brpl	.-8      	; 0x12a4 <DIO_u8read+0x7e>
		break;
    12ac:	08 95       	ret
		
		case 'D' :
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
    12ae:	20 b3       	in	r18, 0x10	; 16
    12b0:	81 e0       	ldi	r24, 0x01	; 1
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	06 2e       	mov	r0, r22
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <DIO_u8read+0x96>
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	0a 94       	dec	r0
    12be:	e2 f7       	brpl	.-8      	; 0x12b8 <DIO_u8read+0x92>
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	82 23       	and	r24, r18
    12c4:	93 23       	and	r25, r19
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_u8read+0xa6>
    12c8:	95 95       	asr	r25
    12ca:	87 95       	ror	r24
    12cc:	6a 95       	dec	r22
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_u8read+0xa2>
		break;
    12d0:	08 95       	ret
}


uint8 DIO_u8read(uint8 portname,uint8 pinnumber)
{
	uint8 return_value=0;
    12d2:	80 e0       	ldi	r24, 0x00	; 0
		return_value=Read_bIT(PIND,pinnumber);//Read the value from the given pin in port D
		break;
		default: break;
	}
	return return_value ;
}
    12d4:	08 95       	ret

000012d6 <DIO_toggle>:
void DIO_toggle(uint8 portname,uint8 pinnumber)
{
	switch(portname)
    12d6:	82 34       	cpi	r24, 0x42	; 66
    12d8:	b9 f0       	breq	.+46     	; 0x1308 <DIO_toggle+0x32>
    12da:	83 34       	cpi	r24, 0x43	; 67
    12dc:	18 f4       	brcc	.+6      	; 0x12e4 <DIO_toggle+0xe>
    12de:	81 34       	cpi	r24, 0x41	; 65
    12e0:	c9 f5       	brne	.+114    	; 0x1354 <DIO_toggle+0x7e>
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <DIO_toggle+0x18>
    12e4:	83 34       	cpi	r24, 0x43	; 67
    12e6:	e9 f0       	breq	.+58     	; 0x1322 <DIO_toggle+0x4c>
    12e8:	84 34       	cpi	r24, 0x44	; 68
    12ea:	a1 f5       	brne	.+104    	; 0x1354 <DIO_toggle+0x7e>
    12ec:	27 c0       	rjmp	.+78     	; 0x133c <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
    12ee:	2b b3       	in	r18, 0x1b	; 27
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	ac 01       	movw	r20, r24
    12f6:	02 c0       	rjmp	.+4      	; 0x12fc <DIO_toggle+0x26>
    12f8:	44 0f       	add	r20, r20
    12fa:	55 1f       	adc	r21, r21
    12fc:	6a 95       	dec	r22
    12fe:	e2 f7       	brpl	.-8      	; 0x12f8 <DIO_toggle+0x22>
    1300:	ba 01       	movw	r22, r20
    1302:	62 27       	eor	r22, r18
    1304:	6b bb       	out	0x1b, r22	; 27
		break;
    1306:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
    1308:	28 b3       	in	r18, 0x18	; 24
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	ac 01       	movw	r20, r24
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_toggle+0x40>
    1312:	44 0f       	add	r20, r20
    1314:	55 1f       	adc	r21, r21
    1316:	6a 95       	dec	r22
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_toggle+0x3c>
    131a:	ba 01       	movw	r22, r20
    131c:	62 27       	eor	r22, r18
    131e:	68 bb       	out	0x18, r22	; 24
		break;
    1320:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
    1322:	25 b3       	in	r18, 0x15	; 21
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	ac 01       	movw	r20, r24
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_toggle+0x5a>
    132c:	44 0f       	add	r20, r20
    132e:	55 1f       	adc	r21, r21
    1330:	6a 95       	dec	r22
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_toggle+0x56>
    1334:	ba 01       	movw	r22, r20
    1336:	62 27       	eor	r22, r18
    1338:	65 bb       	out	0x15, r22	; 21
		break;
    133a:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
    133c:	22 b3       	in	r18, 0x12	; 18
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	ac 01       	movw	r20, r24
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_toggle+0x74>
    1346:	44 0f       	add	r20, r20
    1348:	55 1f       	adc	r21, r21
    134a:	6a 95       	dec	r22
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_toggle+0x70>
    134e:	ba 01       	movw	r22, r20
    1350:	62 27       	eor	r22, r18
    1352:	62 bb       	out	0x12, r22	; 18
    1354:	08 95       	ret

00001356 <DIO_write_port>:
		default: break;
	}
}
void DIO_write_port(uint8 portname,uint8 portvalue)
{
	switch(portname)
    1356:	82 34       	cpi	r24, 0x42	; 66
    1358:	61 f0       	breq	.+24     	; 0x1372 <DIO_write_port+0x1c>
    135a:	83 34       	cpi	r24, 0x43	; 67
    135c:	18 f4       	brcc	.+6      	; 0x1364 <DIO_write_port+0xe>
    135e:	81 34       	cpi	r24, 0x41	; 65
    1360:	69 f4       	brne	.+26     	; 0x137c <DIO_write_port+0x26>
    1362:	05 c0       	rjmp	.+10     	; 0x136e <DIO_write_port+0x18>
    1364:	83 34       	cpi	r24, 0x43	; 67
    1366:	39 f0       	breq	.+14     	; 0x1376 <DIO_write_port+0x20>
    1368:	84 34       	cpi	r24, 0x44	; 68
    136a:	41 f4       	brne	.+16     	; 0x137c <DIO_write_port+0x26>
    136c:	06 c0       	rjmp	.+12     	; 0x137a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
    136e:	6b bb       	out	0x1b, r22	; 27
		break ;
    1370:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
    1372:	68 bb       	out	0x18, r22	; 24
		break ;
    1374:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
    1376:	65 bb       	out	0x15, r22	; 21
		break ;
    1378:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
    137a:	62 bb       	out	0x12, r22	; 18
    137c:	08 95       	ret

0000137e <dio_write_highnibble>:
		default: break ;
	}
}
void dio_write_highnibble(uint8 portname,uint8 value)
{
	switch(portname)
    137e:	82 34       	cpi	r24, 0x42	; 66
    1380:	79 f0       	breq	.+30     	; 0x13a0 <dio_write_highnibble+0x22>
    1382:	83 34       	cpi	r24, 0x43	; 67
    1384:	18 f4       	brcc	.+6      	; 0x138c <dio_write_highnibble+0xe>
    1386:	81 34       	cpi	r24, 0x41	; 65
    1388:	c9 f4       	brne	.+50     	; 0x13bc <dio_write_highnibble+0x3e>
    138a:	05 c0       	rjmp	.+10     	; 0x1396 <dio_write_highnibble+0x18>
    138c:	83 34       	cpi	r24, 0x43	; 67
    138e:	69 f0       	breq	.+26     	; 0x13aa <dio_write_highnibble+0x2c>
    1390:	84 34       	cpi	r24, 0x44	; 68
    1392:	a1 f4       	brne	.+40     	; 0x13bc <dio_write_highnibble+0x3e>
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <dio_write_highnibble+0x36>
	{
		case 'A' :
		PORTA|=(value&0xf0);//Set only the high nibble of the port A by the given value
    1396:	8b b3       	in	r24, 0x1b	; 27
    1398:	60 7f       	andi	r22, 0xF0	; 240
    139a:	68 2b       	or	r22, r24
    139c:	6b bb       	out	0x1b, r22	; 27
		break ;
    139e:	08 95       	ret
		case 'B':
		PORTB|=(value&0xf0);//Set only the high nibble of the port B by the given value
    13a0:	88 b3       	in	r24, 0x18	; 24
    13a2:	60 7f       	andi	r22, 0xF0	; 240
    13a4:	68 2b       	or	r22, r24
    13a6:	68 bb       	out	0x18, r22	; 24
		break ;
    13a8:	08 95       	ret
		case 'C' :
		PORTC|=(value&0xf0);//Set only the high nibble of the port C by the given value
    13aa:	85 b3       	in	r24, 0x15	; 21
    13ac:	60 7f       	andi	r22, 0xF0	; 240
    13ae:	68 2b       	or	r22, r24
    13b0:	65 bb       	out	0x15, r22	; 21
		break ;
    13b2:	08 95       	ret
		case 'D':
		PORTD|=(value&0xf0);//Set only the high nibble of the port D by the given value
    13b4:	82 b3       	in	r24, 0x12	; 18
    13b6:	60 7f       	andi	r22, 0xF0	; 240
    13b8:	68 2b       	or	r22, r24
    13ba:	62 bb       	out	0x12, r22	; 18
    13bc:	08 95       	ret

000013be <clear_high_nibble>:
	}
}

void clear_high_nibble(uint8 portname)
{
	switch(portname)
    13be:	82 34       	cpi	r24, 0x42	; 66
    13c0:	71 f0       	breq	.+28     	; 0x13de <clear_high_nibble+0x20>
    13c2:	83 34       	cpi	r24, 0x43	; 67
    13c4:	18 f4       	brcc	.+6      	; 0x13cc <clear_high_nibble+0xe>
    13c6:	81 34       	cpi	r24, 0x41	; 65
    13c8:	a9 f4       	brne	.+42     	; 0x13f4 <clear_high_nibble+0x36>
    13ca:	05 c0       	rjmp	.+10     	; 0x13d6 <clear_high_nibble+0x18>
    13cc:	83 34       	cpi	r24, 0x43	; 67
    13ce:	59 f0       	breq	.+22     	; 0x13e6 <clear_high_nibble+0x28>
    13d0:	84 34       	cpi	r24, 0x44	; 68
    13d2:	81 f4       	brne	.+32     	; 0x13f4 <clear_high_nibble+0x36>
    13d4:	0c c0       	rjmp	.+24     	; 0x13ee <clear_high_nibble+0x30>
	{
		case 'A' :
		PORTA&=0x0f;//set the value of the high nibble of the port A as low
    13d6:	8b b3       	in	r24, 0x1b	; 27
    13d8:	8f 70       	andi	r24, 0x0F	; 15
    13da:	8b bb       	out	0x1b, r24	; 27
		break ;
    13dc:	08 95       	ret
		case 'B':
		PORTB&=0x0f;//set the value of the high nibble of the port B as low
    13de:	88 b3       	in	r24, 0x18	; 24
    13e0:	8f 70       	andi	r24, 0x0F	; 15
    13e2:	88 bb       	out	0x18, r24	; 24
		break ;
    13e4:	08 95       	ret
		case 'C' :
		PORTC&=0x0f;//set the value of the high nibble of the port C as low
    13e6:	85 b3       	in	r24, 0x15	; 21
    13e8:	8f 70       	andi	r24, 0x0F	; 15
    13ea:	85 bb       	out	0x15, r24	; 21
		break ;
    13ec:	08 95       	ret
		case 'D':
		PORTD&=0x0f;//set the value of the high nibble of the port D as low
    13ee:	82 b3       	in	r24, 0x12	; 18
    13f0:	8f 70       	andi	r24, 0x0F	; 15
    13f2:	82 bb       	out	0x12, r24	; 18
    13f4:	08 95       	ret

000013f6 <DIO_vconnectpullup>:
	}
}

void DIO_vconnectpullup(uint8 portname ,uint8 pinnumber, uint8 connect_pullup)
{
	switch(portname)
    13f6:	82 34       	cpi	r24, 0x42	; 66
    13f8:	91 f1       	breq	.+100    	; 0x145e <DIO_vconnectpullup+0x68>
    13fa:	83 34       	cpi	r24, 0x43	; 67
    13fc:	20 f4       	brcc	.+8      	; 0x1406 <DIO_vconnectpullup+0x10>
    13fe:	81 34       	cpi	r24, 0x41	; 65
    1400:	09 f0       	breq	.+2      	; 0x1404 <DIO_vconnectpullup+0xe>
    1402:	9b c0       	rjmp	.+310    	; 0x153a <DIO_vconnectpullup+0x144>
    1404:	07 c0       	rjmp	.+14     	; 0x1414 <DIO_vconnectpullup+0x1e>
    1406:	83 34       	cpi	r24, 0x43	; 67
    1408:	09 f4       	brne	.+2      	; 0x140c <DIO_vconnectpullup+0x16>
    140a:	4e c0       	rjmp	.+156    	; 0x14a8 <DIO_vconnectpullup+0xb2>
    140c:	84 34       	cpi	r24, 0x44	; 68
    140e:	09 f0       	breq	.+2      	; 0x1412 <DIO_vconnectpullup+0x1c>
    1410:	94 c0       	rjmp	.+296    	; 0x153a <DIO_vconnectpullup+0x144>
    1412:	6f c0       	rjmp	.+222    	; 0x14f2 <DIO_vconnectpullup+0xfc>
	{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case 'A':
		if(connect_pullup==1)
    1414:	41 30       	cpi	r20, 0x01	; 1
    1416:	a9 f4       	brne	.+42     	; 0x1442 <DIO_vconnectpullup+0x4c>
		{
			CLR_BIT(SFIOR,PUD);
    1418:	80 b7       	in	r24, 0x30	; 48
    141a:	8b 7f       	andi	r24, 0xFB	; 251
    141c:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRA,pinnumber);
    141e:	2a b3       	in	r18, 0x1a	; 26
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	90 e0       	ldi	r25, 0x00	; 0
    1424:	ac 01       	movw	r20, r24
    1426:	02 c0       	rjmp	.+4      	; 0x142c <DIO_vconnectpullup+0x36>
    1428:	44 0f       	add	r20, r20
    142a:	55 1f       	adc	r21, r21
    142c:	6a 95       	dec	r22
    142e:	e2 f7       	brpl	.-8      	; 0x1428 <DIO_vconnectpullup+0x32>
    1430:	ba 01       	movw	r22, r20
    1432:	84 2f       	mov	r24, r20
    1434:	80 95       	com	r24
    1436:	82 23       	and	r24, r18
    1438:	8a bb       	out	0x1a, r24	; 26
			SET_BIT(PORTA,pinnumber);
    143a:	8b b3       	in	r24, 0x1b	; 27
    143c:	68 2b       	or	r22, r24
    143e:	6b bb       	out	0x1b, r22	; 27
    1440:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
    1442:	2b b3       	in	r18, 0x1b	; 27
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	ac 01       	movw	r20, r24
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_vconnectpullup+0x5a>
    144c:	44 0f       	add	r20, r20
    144e:	55 1f       	adc	r21, r21
    1450:	6a 95       	dec	r22
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_vconnectpullup+0x56>
    1454:	ba 01       	movw	r22, r20
    1456:	60 95       	com	r22
    1458:	62 23       	and	r22, r18
    145a:	6b bb       	out	0x1b, r22	; 27
    145c:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port B */
		case 'B':
		if(connect_pullup==1)
    145e:	41 30       	cpi	r20, 0x01	; 1
    1460:	a9 f4       	brne	.+42     	; 0x148c <DIO_vconnectpullup+0x96>
		{
			CLR_BIT(SFIOR,PUD);
    1462:	80 b7       	in	r24, 0x30	; 48
    1464:	8b 7f       	andi	r24, 0xFB	; 251
    1466:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRB,pinnumber);
    1468:	27 b3       	in	r18, 0x17	; 23
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	ac 01       	movw	r20, r24
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <DIO_vconnectpullup+0x80>
    1472:	44 0f       	add	r20, r20
    1474:	55 1f       	adc	r21, r21
    1476:	6a 95       	dec	r22
    1478:	e2 f7       	brpl	.-8      	; 0x1472 <DIO_vconnectpullup+0x7c>
    147a:	ba 01       	movw	r22, r20
    147c:	84 2f       	mov	r24, r20
    147e:	80 95       	com	r24
    1480:	82 23       	and	r24, r18
    1482:	87 bb       	out	0x17, r24	; 23
			SET_BIT(PORTB,pinnumber);
    1484:	88 b3       	in	r24, 0x18	; 24
    1486:	68 2b       	or	r22, r24
    1488:	68 bb       	out	0x18, r22	; 24
    148a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
    148c:	28 b3       	in	r18, 0x18	; 24
    148e:	81 e0       	ldi	r24, 0x01	; 1
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	ac 01       	movw	r20, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <DIO_vconnectpullup+0xa4>
    1496:	44 0f       	add	r20, r20
    1498:	55 1f       	adc	r21, r21
    149a:	6a 95       	dec	r22
    149c:	e2 f7       	brpl	.-8      	; 0x1496 <DIO_vconnectpullup+0xa0>
    149e:	ba 01       	movw	r22, r20
    14a0:	60 95       	com	r22
    14a2:	62 23       	and	r22, r18
    14a4:	68 bb       	out	0x18, r22	; 24
    14a6:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port C */
		case 'C':
		if(connect_pullup==1)
    14a8:	41 30       	cpi	r20, 0x01	; 1
    14aa:	a9 f4       	brne	.+42     	; 0x14d6 <DIO_vconnectpullup+0xe0>
		{
			CLR_BIT(SFIOR,PUD);
    14ac:	80 b7       	in	r24, 0x30	; 48
    14ae:	8b 7f       	andi	r24, 0xFB	; 251
    14b0:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRC,pinnumber);
    14b2:	24 b3       	in	r18, 0x14	; 20
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	ac 01       	movw	r20, r24
    14ba:	02 c0       	rjmp	.+4      	; 0x14c0 <DIO_vconnectpullup+0xca>
    14bc:	44 0f       	add	r20, r20
    14be:	55 1f       	adc	r21, r21
    14c0:	6a 95       	dec	r22
    14c2:	e2 f7       	brpl	.-8      	; 0x14bc <DIO_vconnectpullup+0xc6>
    14c4:	ba 01       	movw	r22, r20
    14c6:	84 2f       	mov	r24, r20
    14c8:	80 95       	com	r24
    14ca:	82 23       	and	r24, r18
    14cc:	84 bb       	out	0x14, r24	; 20
			SET_BIT(PORTC,pinnumber);
    14ce:	85 b3       	in	r24, 0x15	; 21
    14d0:	68 2b       	or	r22, r24
    14d2:	65 bb       	out	0x15, r22	; 21
    14d4:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
    14d6:	25 b3       	in	r18, 0x15	; 21
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	ac 01       	movw	r20, r24
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_vconnectpullup+0xee>
    14e0:	44 0f       	add	r20, r20
    14e2:	55 1f       	adc	r21, r21
    14e4:	6a 95       	dec	r22
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_vconnectpullup+0xea>
    14e8:	ba 01       	movw	r22, r20
    14ea:	60 95       	com	r22
    14ec:	62 23       	and	r22, r18
    14ee:	65 bb       	out	0x15, r22	; 21
    14f0:	08 95       	ret
		}
		break;
		/* Connect or disconnect the pull up resistance to the given pin in port D */
		case 'D':
		if(connect_pullup==1)
    14f2:	41 30       	cpi	r20, 0x01	; 1
    14f4:	a9 f4       	brne	.+42     	; 0x1520 <DIO_vconnectpullup+0x12a>
		{
			CLR_BIT(SFIOR,PUD);
    14f6:	80 b7       	in	r24, 0x30	; 48
    14f8:	8b 7f       	andi	r24, 0xFB	; 251
    14fa:	80 bf       	out	0x30, r24	; 48
			CLR_BIT(DDRD,pinnumber);
    14fc:	21 b3       	in	r18, 0x11	; 17
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	ac 01       	movw	r20, r24
    1504:	02 c0       	rjmp	.+4      	; 0x150a <DIO_vconnectpullup+0x114>
    1506:	44 0f       	add	r20, r20
    1508:	55 1f       	adc	r21, r21
    150a:	6a 95       	dec	r22
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <DIO_vconnectpullup+0x110>
    150e:	ba 01       	movw	r22, r20
    1510:	84 2f       	mov	r24, r20
    1512:	80 95       	com	r24
    1514:	82 23       	and	r24, r18
    1516:	81 bb       	out	0x11, r24	; 17
			SET_BIT(PORTD,pinnumber);
    1518:	82 b3       	in	r24, 0x12	; 18
    151a:	68 2b       	or	r22, r24
    151c:	62 bb       	out	0x12, r22	; 18
    151e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
    1520:	22 b3       	in	r18, 0x12	; 18
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	ac 01       	movw	r20, r24
    1528:	02 c0       	rjmp	.+4      	; 0x152e <DIO_vconnectpullup+0x138>
    152a:	44 0f       	add	r20, r20
    152c:	55 1f       	adc	r21, r21
    152e:	6a 95       	dec	r22
    1530:	e2 f7       	brpl	.-8      	; 0x152a <DIO_vconnectpullup+0x134>
    1532:	ba 01       	movw	r22, r20
    1534:	60 95       	com	r22
    1536:	62 23       	and	r22, r18
    1538:	62 bb       	out	0x12, r22	; 18
    153a:	08 95       	ret

0000153c <EEPROM_ui8ReadByteFromAddress>:
#include <avr/io.h>

uint8 EEPROM_ui8ReadByteFromAddress(const uint16 u16Address)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    153c:	e1 99       	sbic	0x1c, 1	; 28
    153e:	fe cf       	rjmp	.-4      	; 0x153c <EEPROM_ui8ReadByteFromAddress>
	;
	/* Set up address register */
	EEAR = u16Address;
    1540:	9f bb       	out	0x1f, r25	; 31
    1542:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    1544:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1546:	8d b3       	in	r24, 0x1d	; 29
}
    1548:	08 95       	ret

0000154a <EEPROM_vReadBlockFromAddress>:

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
{
    154a:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    154c:	e1 99       	sbic	0x1c, 1	; 28
    154e:	fe cf       	rjmp	.-4      	; 0x154c <EEPROM_vReadBlockFromAddress+0x2>
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    1550:	41 15       	cp	r20, r1
    1552:	51 05       	cpc	r21, r1
    1554:	89 f0       	breq	.+34     	; 0x1578 <EEPROM_vReadBlockFromAddress+0x2e>
    1556:	e6 2f       	mov	r30, r22
    1558:	f7 2f       	mov	r31, r23
    155a:	20 e0       	ldi	r18, 0x00	; 0
    155c:	30 e0       	ldi	r19, 0x00	; 0
	EECR |= (1 << EERE);
	/* Return data from data register */
	return EEDR;
}

void EEPROM_vReadBlockFromAddress(const uint16 uiAddress, uint8* dist,const uint16 size)
    155e:	c9 01       	movw	r24, r18
    1560:	8a 0f       	add	r24, r26
    1562:	9b 1f       	adc	r25, r27
	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uiAddress + counter;
    1564:	9f bb       	out	0x1f, r25	; 31
    1566:	8e bb       	out	0x1e, r24	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    1568:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    156a:	8d b3       	in	r24, 0x1d	; 29
    156c:	81 93       	st	Z+, r24

		counter++;//increase the bytes counter
    156e:	2f 5f       	subi	r18, 0xFF	; 255
    1570:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	uint16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    1572:	24 17       	cp	r18, r20
    1574:	35 07       	cpc	r19, r21
    1576:	99 f7       	brne	.-26     	; 0x155e <EEPROM_vReadBlockFromAddress+0x14>
    1578:	08 95       	ret

0000157a <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const uint16 uiAddress, const uint8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    157a:	e1 99       	sbic	0x1c, 1	; 28
    157c:	fe cf       	rjmp	.-4      	; 0x157a <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
    157e:	9f bb       	out	0x1f, r25	; 31
    1580:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1582:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
    1584:	8d b3       	in	r24, 0x1d	; 29
    1586:	86 17       	cp	r24, r22
    1588:	19 f0       	breq	.+6      	; 0x1590 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    158a:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    158c:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    158e:	e1 9a       	sbi	0x1c, 1	; 28
    1590:	08 95       	ret

00001592 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
    1592:	dc 01       	movw	r26, r24
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
    1594:	41 15       	cp	r20, r1
    1596:	51 05       	cpc	r21, r1
    1598:	c1 f0       	breq	.+48     	; 0x15ca <EEPROM_vWriteBlockToAddress+0x38>
    159a:	e6 2f       	mov	r30, r22
    159c:	f7 2f       	mov	r31, r23

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    15a2:	e1 99       	sbic	0x1c, 1	; 28
    15a4:	fe cf       	rjmp	.-4      	; 0x15a2 <EEPROM_vWriteBlockToAddress+0x10>

	}

}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
    15a6:	c9 01       	movw	r24, r18
    15a8:	8a 0f       	add	r24, r26
    15aa:	9b 1f       	adc	r25, r27
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
    15ac:	9f bb       	out	0x1f, r25	; 31
    15ae:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    15b0:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    15b2:	9d b3       	in	r25, 0x1d	; 29
    15b4:	81 91       	ld	r24, Z+
    15b6:	98 17       	cp	r25, r24
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <EEPROM_vWriteBlockToAddress+0x2e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    15ba:	8d bb       	out	0x1d, r24	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    15bc:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    15be:	e1 9a       	sbi	0x1c, 1	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
    15c0:	2f 5f       	subi	r18, 0xFF	; 255
    15c2:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const uint16 uiAddress, const uint8* uiData,const uint16 size)
{
	uint16 counter = 0;//Bytes write counter
	while (counter < size)
    15c4:	24 17       	cp	r18, r20
    15c6:	35 07       	cpc	r19, r21
    15c8:	61 f7       	brne	.-40     	; 0x15a2 <EEPROM_vWriteBlockToAddress+0x10>
    15ca:	08 95       	ret

000015cc <SPI_vInitMaster>:
#include "../../SERVICES/STD_MESSAGES.h"
#include "../../SERVICES/std_macros.h"

void SPI_vInitMaster (void)
{
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    15cc:	87 b3       	in	r24, 0x17	; 23
    15ce:	80 6b       	ori	r24, 0xB0	; 176
    15d0:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    15d2:	8d b1       	in	r24, 0x0d	; 13
    15d4:	81 65       	ori	r24, 0x51	; 81
    15d6:	8d b9       	out	0x0d, r24	; 13
}
    15d8:	08 95       	ret

000015da <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    15da:	be 9a       	sbi	0x17, 6	; 23
	SPCR |= (1<<SPE);//Enable the SPI
    15dc:	6e 9a       	sbi	0x0d, 6	; 13
}
    15de:	08 95       	ret

000015e0 <SPI_ui8TransmitRecive>:

uint8 SPI_ui8TransmitRecive (uint8 data)
{
	SPDR = data;//move the given data to SPI Data register
    15e0:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    15e2:	77 9b       	sbis	0x0e, 7	; 14
    15e4:	fe cf       	rjmp	.-4      	; 0x15e2 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    15e6:	8f b1       	in	r24, 0x0f	; 15
    15e8:	08 95       	ret

000015ea <timer0_initializeCTC>:

void timer0_initializeCTC(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 78; //to achieve tick equal to 10 msec
    15ea:	8e e4       	ldi	r24, 0x4E	; 78
    15ec:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//Set the mode as Compare match
	SET_BIT(TCCR0, WGM01);
    15ee:	83 b7       	in	r24, 0x33	; 51
    15f0:	88 60       	ori	r24, 0x08	; 8
    15f2:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, WGM00);
    15f4:	83 b7       	in	r24, 0x33	; 51
    15f6:	8f 7b       	andi	r24, 0xBF	; 191
    15f8:	83 bf       	out	0x33, r24	; 51
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    15fa:	83 b7       	in	r24, 0x33	; 51
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    1600:	83 b7       	in	r24, 0x33	; 51
    1602:	8d 7f       	andi	r24, 0xFD	; 253
    1604:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
    1606:	83 b7       	in	r24, 0x33	; 51
    1608:	84 60       	ori	r24, 0x04	; 4
    160a:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
    160c:	78 94       	sei
	
	//Enable timer 0 interrupt for compare match
	SET_BIT(TIMSK, OCIE0);
    160e:	89 b7       	in	r24, 0x39	; 57
    1610:	82 60       	ori	r24, 0x02	; 2
    1612:	89 bf       	out	0x39, r24	; 57
}
    1614:	08 95       	ret

00001616 <timer0_stop>:

void timer0_stop(void)
{
	//disable the clock to stop the counter
	CLR_BIT(TCCR0, CS00);
    1616:	83 b7       	in	r24, 0x33	; 51
    1618:	8e 7f       	andi	r24, 0xFE	; 254
    161a:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    161c:	83 b7       	in	r24, 0x33	; 51
    161e:	8d 7f       	andi	r24, 0xFD	; 253
    1620:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS02);
    1622:	83 b7       	in	r24, 0x33	; 51
    1624:	8b 7f       	andi	r24, 0xFB	; 251
    1626:	83 bf       	out	0x33, r24	; 51
}
    1628:	08 95       	ret

0000162a <timer_initializefastpwm>:
void timer_initializefastpwm(void)
{
	//Config OCR0
	//OCR0 = the value to compare with
	OCR0 = 128;
    162a:	80 e8       	ldi	r24, 0x80	; 128
    162c:	8c bf       	out	0x3c, r24	; 60
	
	//Set timer mode
	//adjust fast pulse width modulation mode
	SET_BIT(TCCR0, WGM00); 
    162e:	83 b7       	in	r24, 0x33	; 51
    1630:	80 64       	ori	r24, 0x40	; 64
    1632:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, WGM01);
    1634:	83 b7       	in	r24, 0x33	; 51
    1636:	88 60       	ori	r24, 0x08	; 8
    1638:	83 bf       	out	0x33, r24	; 51
	
	//Enable global interrupts
	sei();
    163a:	78 94       	sei
	
	SET_BIT(TCCR0, COM01); //adjust non inverting mode
    163c:	83 b7       	in	r24, 0x33	; 51
    163e:	80 62       	ori	r24, 0x20	; 32
    1640:	83 bf       	out	0x33, r24	; 51
	
	//Enable timer0 interrupt for overflow mode
	SET_BIT(TIMSK,TOIE0);
    1642:	89 b7       	in	r24, 0x39	; 57
    1644:	81 60       	ori	r24, 0x01	; 1
    1646:	89 bf       	out	0x39, r24	; 57
	
	//Configure clock
	//set as clk/1024
	SET_BIT(TCCR0, CS00);
    1648:	83 b7       	in	r24, 0x33	; 51
    164a:	81 60       	ori	r24, 0x01	; 1
    164c:	83 bf       	out	0x33, r24	; 51
	CLR_BIT(TCCR0, CS01);
    164e:	83 b7       	in	r24, 0x33	; 51
    1650:	8d 7f       	andi	r24, 0xFD	; 253
    1652:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
    1654:	83 b7       	in	r24, 0x33	; 51
    1656:	84 60       	ori	r24, 0x04	; 4
    1658:	83 bf       	out	0x33, r24	; 51
}
    165a:	08 95       	ret

0000165c <change_dutycycle>:
void change_dutycycle(float64 duty)
{
	OCR0 = (duty / 100) * 256;//Set the OCR0 depending on the duty percentage
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	48 ec       	ldi	r20, 0xC8	; 200
    1662:	52 e4       	ldi	r21, 0x42	; 66
    1664:	0e 94 3e 0b 	call	0x167c	; 0x167c <__divsf3>
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	40 e8       	ldi	r20, 0x80	; 128
    166e:	53 e4       	ldi	r21, 0x43	; 67
    1670:	0e 94 23 0c 	call	0x1846	; 0x1846 <__mulsf3>
    1674:	0e 94 a6 0b 	call	0x174c	; 0x174c <__fixunssfsi>
    1678:	6c bf       	out	0x3c, r22	; 60
}
    167a:	08 95       	ret

0000167c <__divsf3>:
    167c:	0c d0       	rcall	.+24     	; 0x1696 <__divsf3x>
    167e:	a9 c0       	rjmp	.+338    	; 0x17d2 <__fp_round>
    1680:	a1 d0       	rcall	.+322    	; 0x17c4 <__fp_pscB>
    1682:	40 f0       	brcs	.+16     	; 0x1694 <__divsf3+0x18>
    1684:	98 d0       	rcall	.+304    	; 0x17b6 <__fp_pscA>
    1686:	30 f0       	brcs	.+12     	; 0x1694 <__divsf3+0x18>
    1688:	21 f4       	brne	.+8      	; 0x1692 <__divsf3+0x16>
    168a:	5f 3f       	cpi	r21, 0xFF	; 255
    168c:	19 f0       	breq	.+6      	; 0x1694 <__divsf3+0x18>
    168e:	8a c0       	rjmp	.+276    	; 0x17a4 <__fp_inf>
    1690:	51 11       	cpse	r21, r1
    1692:	d3 c0       	rjmp	.+422    	; 0x183a <__fp_szero>
    1694:	8d c0       	rjmp	.+282    	; 0x17b0 <__fp_nan>

00001696 <__divsf3x>:
    1696:	ae d0       	rcall	.+348    	; 0x17f4 <__fp_split3>
    1698:	98 f3       	brcs	.-26     	; 0x1680 <__divsf3+0x4>

0000169a <__divsf3_pse>:
    169a:	99 23       	and	r25, r25
    169c:	c9 f3       	breq	.-14     	; 0x1690 <__divsf3+0x14>
    169e:	55 23       	and	r21, r21
    16a0:	b1 f3       	breq	.-20     	; 0x168e <__divsf3+0x12>
    16a2:	95 1b       	sub	r25, r21
    16a4:	55 0b       	sbc	r21, r21
    16a6:	bb 27       	eor	r27, r27
    16a8:	aa 27       	eor	r26, r26
    16aa:	62 17       	cp	r22, r18
    16ac:	73 07       	cpc	r23, r19
    16ae:	84 07       	cpc	r24, r20
    16b0:	38 f0       	brcs	.+14     	; 0x16c0 <__divsf3_pse+0x26>
    16b2:	9f 5f       	subi	r25, 0xFF	; 255
    16b4:	5f 4f       	sbci	r21, 0xFF	; 255
    16b6:	22 0f       	add	r18, r18
    16b8:	33 1f       	adc	r19, r19
    16ba:	44 1f       	adc	r20, r20
    16bc:	aa 1f       	adc	r26, r26
    16be:	a9 f3       	breq	.-22     	; 0x16aa <__divsf3_pse+0x10>
    16c0:	33 d0       	rcall	.+102    	; 0x1728 <__divsf3_pse+0x8e>
    16c2:	0e 2e       	mov	r0, r30
    16c4:	3a f0       	brmi	.+14     	; 0x16d4 <__divsf3_pse+0x3a>
    16c6:	e0 e8       	ldi	r30, 0x80	; 128
    16c8:	30 d0       	rcall	.+96     	; 0x172a <__divsf3_pse+0x90>
    16ca:	91 50       	subi	r25, 0x01	; 1
    16cc:	50 40       	sbci	r21, 0x00	; 0
    16ce:	e6 95       	lsr	r30
    16d0:	00 1c       	adc	r0, r0
    16d2:	ca f7       	brpl	.-14     	; 0x16c6 <__divsf3_pse+0x2c>
    16d4:	29 d0       	rcall	.+82     	; 0x1728 <__divsf3_pse+0x8e>
    16d6:	fe 2f       	mov	r31, r30
    16d8:	27 d0       	rcall	.+78     	; 0x1728 <__divsf3_pse+0x8e>
    16da:	66 0f       	add	r22, r22
    16dc:	77 1f       	adc	r23, r23
    16de:	88 1f       	adc	r24, r24
    16e0:	bb 1f       	adc	r27, r27
    16e2:	26 17       	cp	r18, r22
    16e4:	37 07       	cpc	r19, r23
    16e6:	48 07       	cpc	r20, r24
    16e8:	ab 07       	cpc	r26, r27
    16ea:	b0 e8       	ldi	r27, 0x80	; 128
    16ec:	09 f0       	breq	.+2      	; 0x16f0 <__divsf3_pse+0x56>
    16ee:	bb 0b       	sbc	r27, r27
    16f0:	80 2d       	mov	r24, r0
    16f2:	bf 01       	movw	r22, r30
    16f4:	ff 27       	eor	r31, r31
    16f6:	93 58       	subi	r25, 0x83	; 131
    16f8:	5f 4f       	sbci	r21, 0xFF	; 255
    16fa:	2a f0       	brmi	.+10     	; 0x1706 <__divsf3_pse+0x6c>
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	51 05       	cpc	r21, r1
    1700:	68 f0       	brcs	.+26     	; 0x171c <__divsf3_pse+0x82>
    1702:	50 c0       	rjmp	.+160    	; 0x17a4 <__fp_inf>
    1704:	9a c0       	rjmp	.+308    	; 0x183a <__fp_szero>
    1706:	5f 3f       	cpi	r21, 0xFF	; 255
    1708:	ec f3       	brlt	.-6      	; 0x1704 <__divsf3_pse+0x6a>
    170a:	98 3e       	cpi	r25, 0xE8	; 232
    170c:	dc f3       	brlt	.-10     	; 0x1704 <__divsf3_pse+0x6a>
    170e:	86 95       	lsr	r24
    1710:	77 95       	ror	r23
    1712:	67 95       	ror	r22
    1714:	b7 95       	ror	r27
    1716:	f7 95       	ror	r31
    1718:	9f 5f       	subi	r25, 0xFF	; 255
    171a:	c9 f7       	brne	.-14     	; 0x170e <__divsf3_pse+0x74>
    171c:	88 0f       	add	r24, r24
    171e:	91 1d       	adc	r25, r1
    1720:	96 95       	lsr	r25
    1722:	87 95       	ror	r24
    1724:	97 f9       	bld	r25, 7
    1726:	08 95       	ret
    1728:	e1 e0       	ldi	r30, 0x01	; 1
    172a:	66 0f       	add	r22, r22
    172c:	77 1f       	adc	r23, r23
    172e:	88 1f       	adc	r24, r24
    1730:	bb 1f       	adc	r27, r27
    1732:	62 17       	cp	r22, r18
    1734:	73 07       	cpc	r23, r19
    1736:	84 07       	cpc	r24, r20
    1738:	ba 07       	cpc	r27, r26
    173a:	20 f0       	brcs	.+8      	; 0x1744 <__divsf3_pse+0xaa>
    173c:	62 1b       	sub	r22, r18
    173e:	73 0b       	sbc	r23, r19
    1740:	84 0b       	sbc	r24, r20
    1742:	ba 0b       	sbc	r27, r26
    1744:	ee 1f       	adc	r30, r30
    1746:	88 f7       	brcc	.-30     	; 0x172a <__divsf3_pse+0x90>
    1748:	e0 95       	com	r30
    174a:	08 95       	ret

0000174c <__fixunssfsi>:
    174c:	5b d0       	rcall	.+182    	; 0x1804 <__fp_splitA>
    174e:	88 f0       	brcs	.+34     	; 0x1772 <__fixunssfsi+0x26>
    1750:	9f 57       	subi	r25, 0x7F	; 127
    1752:	90 f0       	brcs	.+36     	; 0x1778 <__fixunssfsi+0x2c>
    1754:	b9 2f       	mov	r27, r25
    1756:	99 27       	eor	r25, r25
    1758:	b7 51       	subi	r27, 0x17	; 23
    175a:	a0 f0       	brcs	.+40     	; 0x1784 <__fixunssfsi+0x38>
    175c:	d1 f0       	breq	.+52     	; 0x1792 <__fixunssfsi+0x46>
    175e:	66 0f       	add	r22, r22
    1760:	77 1f       	adc	r23, r23
    1762:	88 1f       	adc	r24, r24
    1764:	99 1f       	adc	r25, r25
    1766:	1a f0       	brmi	.+6      	; 0x176e <__fixunssfsi+0x22>
    1768:	ba 95       	dec	r27
    176a:	c9 f7       	brne	.-14     	; 0x175e <__fixunssfsi+0x12>
    176c:	12 c0       	rjmp	.+36     	; 0x1792 <__fixunssfsi+0x46>
    176e:	b1 30       	cpi	r27, 0x01	; 1
    1770:	81 f0       	breq	.+32     	; 0x1792 <__fixunssfsi+0x46>
    1772:	62 d0       	rcall	.+196    	; 0x1838 <__fp_zero>
    1774:	b1 e0       	ldi	r27, 0x01	; 1
    1776:	08 95       	ret
    1778:	5f c0       	rjmp	.+190    	; 0x1838 <__fp_zero>
    177a:	67 2f       	mov	r22, r23
    177c:	78 2f       	mov	r23, r24
    177e:	88 27       	eor	r24, r24
    1780:	b8 5f       	subi	r27, 0xF8	; 248
    1782:	39 f0       	breq	.+14     	; 0x1792 <__fixunssfsi+0x46>
    1784:	b9 3f       	cpi	r27, 0xF9	; 249
    1786:	cc f3       	brlt	.-14     	; 0x177a <__fixunssfsi+0x2e>
    1788:	86 95       	lsr	r24
    178a:	77 95       	ror	r23
    178c:	67 95       	ror	r22
    178e:	b3 95       	inc	r27
    1790:	d9 f7       	brne	.-10     	; 0x1788 <__fixunssfsi+0x3c>
    1792:	3e f4       	brtc	.+14     	; 0x17a2 <__fixunssfsi+0x56>
    1794:	90 95       	com	r25
    1796:	80 95       	com	r24
    1798:	70 95       	com	r23
    179a:	61 95       	neg	r22
    179c:	7f 4f       	sbci	r23, 0xFF	; 255
    179e:	8f 4f       	sbci	r24, 0xFF	; 255
    17a0:	9f 4f       	sbci	r25, 0xFF	; 255
    17a2:	08 95       	ret

000017a4 <__fp_inf>:
    17a4:	97 f9       	bld	r25, 7
    17a6:	9f 67       	ori	r25, 0x7F	; 127
    17a8:	80 e8       	ldi	r24, 0x80	; 128
    17aa:	70 e0       	ldi	r23, 0x00	; 0
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	08 95       	ret

000017b0 <__fp_nan>:
    17b0:	9f ef       	ldi	r25, 0xFF	; 255
    17b2:	80 ec       	ldi	r24, 0xC0	; 192
    17b4:	08 95       	ret

000017b6 <__fp_pscA>:
    17b6:	00 24       	eor	r0, r0
    17b8:	0a 94       	dec	r0
    17ba:	16 16       	cp	r1, r22
    17bc:	17 06       	cpc	r1, r23
    17be:	18 06       	cpc	r1, r24
    17c0:	09 06       	cpc	r0, r25
    17c2:	08 95       	ret

000017c4 <__fp_pscB>:
    17c4:	00 24       	eor	r0, r0
    17c6:	0a 94       	dec	r0
    17c8:	12 16       	cp	r1, r18
    17ca:	13 06       	cpc	r1, r19
    17cc:	14 06       	cpc	r1, r20
    17ce:	05 06       	cpc	r0, r21
    17d0:	08 95       	ret

000017d2 <__fp_round>:
    17d2:	09 2e       	mov	r0, r25
    17d4:	03 94       	inc	r0
    17d6:	00 0c       	add	r0, r0
    17d8:	11 f4       	brne	.+4      	; 0x17de <__fp_round+0xc>
    17da:	88 23       	and	r24, r24
    17dc:	52 f0       	brmi	.+20     	; 0x17f2 <__fp_round+0x20>
    17de:	bb 0f       	add	r27, r27
    17e0:	40 f4       	brcc	.+16     	; 0x17f2 <__fp_round+0x20>
    17e2:	bf 2b       	or	r27, r31
    17e4:	11 f4       	brne	.+4      	; 0x17ea <__fp_round+0x18>
    17e6:	60 ff       	sbrs	r22, 0
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <__fp_round+0x20>
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	08 95       	ret

000017f4 <__fp_split3>:
    17f4:	57 fd       	sbrc	r21, 7
    17f6:	90 58       	subi	r25, 0x80	; 128
    17f8:	44 0f       	add	r20, r20
    17fa:	55 1f       	adc	r21, r21
    17fc:	59 f0       	breq	.+22     	; 0x1814 <__fp_splitA+0x10>
    17fe:	5f 3f       	cpi	r21, 0xFF	; 255
    1800:	71 f0       	breq	.+28     	; 0x181e <__fp_splitA+0x1a>
    1802:	47 95       	ror	r20

00001804 <__fp_splitA>:
    1804:	88 0f       	add	r24, r24
    1806:	97 fb       	bst	r25, 7
    1808:	99 1f       	adc	r25, r25
    180a:	61 f0       	breq	.+24     	; 0x1824 <__fp_splitA+0x20>
    180c:	9f 3f       	cpi	r25, 0xFF	; 255
    180e:	79 f0       	breq	.+30     	; 0x182e <__fp_splitA+0x2a>
    1810:	87 95       	ror	r24
    1812:	08 95       	ret
    1814:	12 16       	cp	r1, r18
    1816:	13 06       	cpc	r1, r19
    1818:	14 06       	cpc	r1, r20
    181a:	55 1f       	adc	r21, r21
    181c:	f2 cf       	rjmp	.-28     	; 0x1802 <__fp_split3+0xe>
    181e:	46 95       	lsr	r20
    1820:	f1 df       	rcall	.-30     	; 0x1804 <__fp_splitA>
    1822:	08 c0       	rjmp	.+16     	; 0x1834 <__fp_splitA+0x30>
    1824:	16 16       	cp	r1, r22
    1826:	17 06       	cpc	r1, r23
    1828:	18 06       	cpc	r1, r24
    182a:	99 1f       	adc	r25, r25
    182c:	f1 cf       	rjmp	.-30     	; 0x1810 <__fp_splitA+0xc>
    182e:	86 95       	lsr	r24
    1830:	71 05       	cpc	r23, r1
    1832:	61 05       	cpc	r22, r1
    1834:	08 94       	sec
    1836:	08 95       	ret

00001838 <__fp_zero>:
    1838:	e8 94       	clt

0000183a <__fp_szero>:
    183a:	bb 27       	eor	r27, r27
    183c:	66 27       	eor	r22, r22
    183e:	77 27       	eor	r23, r23
    1840:	cb 01       	movw	r24, r22
    1842:	97 f9       	bld	r25, 7
    1844:	08 95       	ret

00001846 <__mulsf3>:
    1846:	0b d0       	rcall	.+22     	; 0x185e <__mulsf3x>
    1848:	c4 cf       	rjmp	.-120    	; 0x17d2 <__fp_round>
    184a:	b5 df       	rcall	.-150    	; 0x17b6 <__fp_pscA>
    184c:	28 f0       	brcs	.+10     	; 0x1858 <__mulsf3+0x12>
    184e:	ba df       	rcall	.-140    	; 0x17c4 <__fp_pscB>
    1850:	18 f0       	brcs	.+6      	; 0x1858 <__mulsf3+0x12>
    1852:	95 23       	and	r25, r21
    1854:	09 f0       	breq	.+2      	; 0x1858 <__mulsf3+0x12>
    1856:	a6 cf       	rjmp	.-180    	; 0x17a4 <__fp_inf>
    1858:	ab cf       	rjmp	.-170    	; 0x17b0 <__fp_nan>
    185a:	11 24       	eor	r1, r1
    185c:	ee cf       	rjmp	.-36     	; 0x183a <__fp_szero>

0000185e <__mulsf3x>:
    185e:	ca df       	rcall	.-108    	; 0x17f4 <__fp_split3>
    1860:	a0 f3       	brcs	.-24     	; 0x184a <__mulsf3+0x4>

00001862 <__mulsf3_pse>:
    1862:	95 9f       	mul	r25, r21
    1864:	d1 f3       	breq	.-12     	; 0x185a <__mulsf3+0x14>
    1866:	95 0f       	add	r25, r21
    1868:	50 e0       	ldi	r21, 0x00	; 0
    186a:	55 1f       	adc	r21, r21
    186c:	62 9f       	mul	r22, r18
    186e:	f0 01       	movw	r30, r0
    1870:	72 9f       	mul	r23, r18
    1872:	bb 27       	eor	r27, r27
    1874:	f0 0d       	add	r31, r0
    1876:	b1 1d       	adc	r27, r1
    1878:	63 9f       	mul	r22, r19
    187a:	aa 27       	eor	r26, r26
    187c:	f0 0d       	add	r31, r0
    187e:	b1 1d       	adc	r27, r1
    1880:	aa 1f       	adc	r26, r26
    1882:	64 9f       	mul	r22, r20
    1884:	66 27       	eor	r22, r22
    1886:	b0 0d       	add	r27, r0
    1888:	a1 1d       	adc	r26, r1
    188a:	66 1f       	adc	r22, r22
    188c:	82 9f       	mul	r24, r18
    188e:	22 27       	eor	r18, r18
    1890:	b0 0d       	add	r27, r0
    1892:	a1 1d       	adc	r26, r1
    1894:	62 1f       	adc	r22, r18
    1896:	73 9f       	mul	r23, r19
    1898:	b0 0d       	add	r27, r0
    189a:	a1 1d       	adc	r26, r1
    189c:	62 1f       	adc	r22, r18
    189e:	83 9f       	mul	r24, r19
    18a0:	a0 0d       	add	r26, r0
    18a2:	61 1d       	adc	r22, r1
    18a4:	22 1f       	adc	r18, r18
    18a6:	74 9f       	mul	r23, r20
    18a8:	33 27       	eor	r19, r19
    18aa:	a0 0d       	add	r26, r0
    18ac:	61 1d       	adc	r22, r1
    18ae:	23 1f       	adc	r18, r19
    18b0:	84 9f       	mul	r24, r20
    18b2:	60 0d       	add	r22, r0
    18b4:	21 1d       	adc	r18, r1
    18b6:	82 2f       	mov	r24, r18
    18b8:	76 2f       	mov	r23, r22
    18ba:	6a 2f       	mov	r22, r26
    18bc:	11 24       	eor	r1, r1
    18be:	9f 57       	subi	r25, 0x7F	; 127
    18c0:	50 40       	sbci	r21, 0x00	; 0
    18c2:	8a f0       	brmi	.+34     	; 0x18e6 <__mulsf3_pse+0x84>
    18c4:	e1 f0       	breq	.+56     	; 0x18fe <__mulsf3_pse+0x9c>
    18c6:	88 23       	and	r24, r24
    18c8:	4a f0       	brmi	.+18     	; 0x18dc <__mulsf3_pse+0x7a>
    18ca:	ee 0f       	add	r30, r30
    18cc:	ff 1f       	adc	r31, r31
    18ce:	bb 1f       	adc	r27, r27
    18d0:	66 1f       	adc	r22, r22
    18d2:	77 1f       	adc	r23, r23
    18d4:	88 1f       	adc	r24, r24
    18d6:	91 50       	subi	r25, 0x01	; 1
    18d8:	50 40       	sbci	r21, 0x00	; 0
    18da:	a9 f7       	brne	.-22     	; 0x18c6 <__mulsf3_pse+0x64>
    18dc:	9e 3f       	cpi	r25, 0xFE	; 254
    18de:	51 05       	cpc	r21, r1
    18e0:	70 f0       	brcs	.+28     	; 0x18fe <__mulsf3_pse+0x9c>
    18e2:	60 cf       	rjmp	.-320    	; 0x17a4 <__fp_inf>
    18e4:	aa cf       	rjmp	.-172    	; 0x183a <__fp_szero>
    18e6:	5f 3f       	cpi	r21, 0xFF	; 255
    18e8:	ec f3       	brlt	.-6      	; 0x18e4 <__mulsf3_pse+0x82>
    18ea:	98 3e       	cpi	r25, 0xE8	; 232
    18ec:	dc f3       	brlt	.-10     	; 0x18e4 <__mulsf3_pse+0x82>
    18ee:	86 95       	lsr	r24
    18f0:	77 95       	ror	r23
    18f2:	67 95       	ror	r22
    18f4:	b7 95       	ror	r27
    18f6:	f7 95       	ror	r31
    18f8:	e7 95       	ror	r30
    18fa:	9f 5f       	subi	r25, 0xFF	; 255
    18fc:	c1 f7       	brne	.-16     	; 0x18ee <__mulsf3_pse+0x8c>
    18fe:	fe 2b       	or	r31, r30
    1900:	88 0f       	add	r24, r24
    1902:	91 1d       	adc	r25, r1
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <_exit>:
    190c:	f8 94       	cli

0000190e <__stop_program>:
    190e:	ff cf       	rjmp	.-2      	; 0x190e <__stop_program>
